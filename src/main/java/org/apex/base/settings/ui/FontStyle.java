/*
 * FontStyle.java
 * Created on 12 July, 2007, 1:11 AM 
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.core.EditorBase;
import org.apex.base.data.Fonts;
import org.apex.base.data.EditorContext;
import org.apex.base.settings.FontStyleConfiguration;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import org.apex.base.ui.text.UIModel;
import java.awt.Font;
import java.util.Vector;
import javax.swing.JList;

/**
 * A form where user can change text font used by all documents in the editor.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class FontStyle extends javax.swing.JPanel implements UIModel,
                                                             UIConfigurationDataModel {

    /**
     * Font style configuration.
     */
    private FontStyleConfiguration fontStyleConfig;

    /**
     * Creates new form {@code FontStyle} using specified
     * font style configuration.
     * @param fontStyleConfig Font style configuration.
     */
    public FontStyle(
            FontStyleConfiguration fontStyleConfig) {
        this.fontStyleConfig = fontStyleConfig;
        initComponents();
        applyConfiguration();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fontNameTitle = new javax.swing.JLabel();
        fontStyleTitle = new javax.swing.JLabel();
        fontSizeTitle = new javax.swing.JLabel();
        fontName = new javax.swing.JTextField();
        fontStyle = new javax.swing.JTextField();
        fontSize = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        fontNames = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        fontStyles = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        fontSizes = new javax.swing.JList();
        previewText = new javax.swing.JLabel();

        fontNameTitle.setText("Font Name:");

        fontStyleTitle.setText("Font Style:");

        fontSizeTitle.setText("Font Size:");

        fontName.setEditable(false);

        fontStyle.setEditable(false);

        fontSize.setEditable(false);

        fontNames.setModel(UIConfigurationUtility.getListModel(getFontNames()));
        fontNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontNameChangeHandler(evt);
            }
        });
        jScrollPane2.setViewportView(fontNames);

        fontStyles.setModel(UIConfigurationUtility.getListModel(getFontStyles()));
        fontStyles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontStyles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontStyleChangeHandler(evt);
            }
        });
        jScrollPane3.setViewportView(fontStyles);

        fontSizes.setModel(UIConfigurationUtility.getListModel(getFontSizes()));
        fontSizes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontSizes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontSizeChangeHandler(evt);
            }
        });
        jScrollPane4.setViewportView(fontSizes);

        previewText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Preview", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 204))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(previewText, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fontNameTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(fontName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fontStyleTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(fontStyle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fontSizeTitle)
                                .addGap(13, 13, 13))
                            .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontSizeTitle)
                    .addComponent(fontNameTitle)
                    .addComponent(fontStyleTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fontStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fontName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewText, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void fontSizeChangeHandler(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontSizeChangeHandler
        JList target = (JList) evt.getSource();
        String sFontSize = (String) target.getSelectedValue();
        fontSize.setText(sFontSize);
        displayPreview();
    }//GEN-LAST:event_fontSizeChangeHandler

    private void fontStyleChangeHandler(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontStyleChangeHandler
        JList target = (JList) evt.getSource();
        String sFontStyle = (String) target.getSelectedValue();
        fontStyle.setText(sFontStyle);
        displayPreview();
    }//GEN-LAST:event_fontStyleChangeHandler

    private void fontNameChangeHandler(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontNameChangeHandler
        JList target = (JList) evt.getSource();
        String sFontName = (String) target.getSelectedValue();
        fontName.setText(sFontName);
        displayPreview();
    }//GEN-LAST:event_fontNameChangeHandler

    public EditorContext getContext() {
        return EditorBase.getContext();
    }

    /**
     * Display preview of selected font.
     */
    private void displayPreview() {
        try {
            String selectedFontName =
                    (String) fontNames.getSelectedValue();
            String selectedFontStyle =
                    (String) fontStyles.getSelectedValue();
            int selectedFontSize =
                    Integer.parseInt((String) fontSizes.getSelectedValue());
            Font f =
                    new Font(selectedFontName,
                    Fonts.getIntFontStyle(selectedFontStyle),
                    selectedFontSize);
            previewText.setText(selectedFontName);
            previewText.setFont(f);

            this.fontStyleConfig.setName(selectedFontName);
            this.fontStyleConfig.setStyle(selectedFontStyle);
            this.fontStyleConfig.setSize(selectedFontSize);
        } catch (NumberFormatException ex) {
        } catch (NullPointerException np) {
        }
    }

    /**
     * Returns the list of font families.
     * @return The list of font families.
     */
    private Vector getFontNames() {
        return Fonts.getFontNames();
    }

    /**
     * Returns the list of font styles.
     * @return The list of font styles.
     */
    private Vector getFontStyles() {
        Vector<String> styles = new Vector<String>(1);
        styles.add(Fonts.REGULAR);
        return styles;
    }

    /**
     * Returns the list of font sizes.
     * @return The list of font sizes.
     */
    private Vector getFontSizes() {
        return Fonts.getFontSizes();
    }

    public void applyConfiguration() {
        // Font Name
        String mfontName = fontStyleConfig.getName();
        this.fontNames.setSelectedValue(mfontName, true);
        // Font Style
        String mfontStyle = fontStyleConfig.getStyle();
        this.fontStyles.setSelectedValue(mfontStyle, true);
        // Font Size
        int mfontSize = fontStyleConfig.getSize();

        this.fontSizes.setSelectedValue(String.valueOf(mfontSize), true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fontName;
    private javax.swing.JLabel fontNameTitle;
    private javax.swing.JList fontNames;
    private javax.swing.JTextField fontSize;
    private javax.swing.JLabel fontSizeTitle;
    private javax.swing.JList fontSizes;
    private javax.swing.JTextField fontStyle;
    private javax.swing.JLabel fontStyleTitle;
    private javax.swing.JList fontStyles;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel previewText;
    // End of variables declaration//GEN-END:variables
}
