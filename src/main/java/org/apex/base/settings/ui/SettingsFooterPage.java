/*
 * SettingsFooterPage.java
 * Created on 12 July, 2007, 1:26 AM
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import java.io.File;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.apex.base.settings.ConfigurationManager;
import org.apex.base.settings.EditorConfiguration;
import org.apex.base.settings.SettingsMessageManager;
import org.apex.base.util.EditorUtil;

/** 
 * The footer of configuration page.
 * @author Mrityunjoy Saha
 * @version 1.1
 * @since Apex 1.0
 */
public class SettingsFooterPage extends javax.swing.JPanel {

    /**
     * The cloned version of root configuration.
     */
    private EditorConfiguration clonedConfig;
    /**
     * The root configuration.
     */
    private EditorConfiguration liveConfig;
    /**
     * The container dialog window.
     */
    private JDialog containerWindow;

    /**
     * Creates new form {@code SettingsFooterPage}.
     */
    public SettingsFooterPage() {
        init();
    }

    /**
     * Creates new form {@code SettingsFooterPage} using given root configuration
     * and cloned version of root configuration.
     * @param liveConfig The root configuration.
     * @param clonedConfig The cloned version of root configuration.
     */
    public SettingsFooterPage(EditorConfiguration liveConfig,
            EditorConfiguration clonedConfig) {
        this.liveConfig = liveConfig;
        this.clonedConfig = clonedConfig;
        init();
    }

    /**
     * Initializes the footer of configuration page.
     */
    public void init() {
        initComponents();
    }

    /**
     * Closes the Configuration window.
     */
    private void closeConfigurationWindow() {
        // Remove the cloned configuration object tree.
        if (this.clonedConfig != null) {
            this.clonedConfig.remove();
            this.clonedConfig = null;
        }

        // Dispose the main (live) configuration tree.
        this.liveConfig.disposeIfCacheNotRequired();

        getContainerWindow().setVisible(false);
        getContainerWindow().dispose();
        getContainerWindow().removeAll();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelSettings = new javax.swing.JButton();
        applySettings = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        restore = new javax.swing.JButton();

        cancelSettings.setText("Cancel");
        cancelSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSettingsHandler(evt);
            }
        });

        applySettings.setText("Apply");
        applySettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySettingsHandler(evt);
            }
        });

        restore.setText("Restore Default");
        restore.setFocusable(false);
        restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(restore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addComponent(cancelSettings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applySettings)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelSettings)
                    .addComponent(applySettings)
                    .addComponent(restore))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void applySettingsHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySettingsHandler
        this.applySettings.setEnabled(false);
        try {
            // Get Original Configuration        
            ConfigurationManager.getInstance().
                    updateConfiguration(this.liveConfig, this.clonedConfig);
        } finally {
            this.applySettings.setEnabled(true);
        }
        // Close the configuration screen
        closeConfigurationWindow();
    }//GEN-LAST:event_applySettingsHandler

    private void cancelSettingsHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSettingsHandler
        // Close the screen
        closeConfigurationWindow();
    }//GEN-LAST:event_cancelSettingsHandler

private void restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreActionPerformed
    int choice = SettingsMessageManager.showConfirmMessage(this.containerWindow,
            1016);
    if (choice == JOptionPane.YES_OPTION) {
        String dir = EditorUtil.getApexSettingsHomeDir();
        File settingsHomeDir = new File(dir);
        if (settingsHomeDir.exists()) {
            File[] settingsFiles = settingsHomeDir.listFiles();
            for (File settingsFile : settingsFiles) {
                if (!settingsFile.getName().contains(
                        "RecentFiles")) {
                    settingsFile.deleteOnExit();
                }
            }
        }
        closeConfigurationWindow();
    } else {
        // Do nothing.
    }
}//GEN-LAST:event_restoreActionPerformed

    /**
     * Returns the container dialog window for configuration page.
     * @return The container dialog window.
     * @see #setContainerWindow(javax.swing.JDialog)
     */
    public JDialog getContainerWindow() {
        return containerWindow;
    }

    /**
     * Sets the container dialog window for configuration page.
     * @param containerWindow The container dialog window.
     * @see #getContainerWindow()
     */
    public void setContainerWindow(JDialog containerWindow) {
        this.containerWindow = containerWindow;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applySettings;
    private javax.swing.JButton cancelSettings;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton restore;
    // End of variables declaration//GEN-END:variables
}
