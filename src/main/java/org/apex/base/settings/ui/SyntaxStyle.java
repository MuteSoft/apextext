/*
 * SyntaxStyle.java
 * Created on 12 July, 2007, 1:16 AM
 * 
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.data.Fonts;
import org.apex.base.util.ConfigurationUtility;
import org.apex.base.settings.Style;
import org.apex.base.settings.SyntaxStyleConfiguration;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import java.awt.Color;
import java.awt.Font;
import java.util.List;
import java.util.Vector;
import org.apex.base.core.EditorBase;
import org.apex.base.data.IDocumentType;

/**
 * A panel to display syntax style configuration.
 * @author Mrityunjoy Saha
 * @version 1.1
 * @since Apex 1.0
 */
public class SyntaxStyle extends javax.swing.JPanel implements
        UIConfigurationDataModel {

    /**
     * A key used to refer background color in syntax style.
     */
    private static final String BACKGROUND = "background";
    /**
     * Syntax style configuration.
     */
    private SyntaxStyleConfiguration syntaxStyleConfig;
    /**
     * The selected document type.
     */
    private IDocumentType selectedDocumentType;
    /**
     * The selected syntax category.
     */
    private String selectedCategory;
    /**
     * The index of selected syntax category.
     */
    private int selectedCategoryIndex;
    /**
     * A list of syntax categories for selected document type.
     */
    private List<String> selectedDocTypeCategories;

    /**
     * Creates new form {@code SyntaxStyle} using given syntax style configuration.
     * @param syntaxStyleConfig Syntax style configuration.
     */
    public SyntaxStyle(
            SyntaxStyleConfiguration syntaxStyleConfig) {
        this.syntaxStyleConfig = syntaxStyleConfig;
        initComponents();
        applyConfiguration();
    }

    /**
     * For the selected document type in first list, update syntax categories
     * in second list.
     */
    private void displayCategories() {
        List<String> selectedCategories = getSyntaxCategories();
        this.categories.setModel(UIConfigurationUtility.getListModel(
                selectedCategories));
        this.categories.setSelectedIndex(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        documentTypes = new javax.swing.JList();
        documentTypesTitle = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        categories = new javax.swing.JList();
        categoriesTitle = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        fontFamilyTitle = new javax.swing.JLabel();
        fontStyles = new javax.swing.JComboBox();
        colorTitle = new javax.swing.JLabel();
        previewText = new javax.swing.JLabel();
        previewTitle = new javax.swing.JLabel();
        syntaxColorLabel = new javax.swing.JLabel();
        syntaxColorChooser = new javax.swing.JButton();
        sampleSyntaxColor = new javax.swing.JTextField();

        documentTypes.setFont(new java.awt.Font("Tahoma", 1, 11));
        documentTypes.setModel(UIConfigurationUtility.getListModel(getDocumentTypes()));
        documentTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        documentTypes.setSelectedIndex(0);
        documentTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                documentTypesValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(documentTypes);

        documentTypesTitle.setText("Document Types:"); // NOI18N

        categories.setModel(UIConfigurationUtility.getListModel(getDefaultSyntaxCategories()));
        categories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        categories.setSelectedIndex(0);
        categories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryChangeHandler(evt);
            }
        });
        jScrollPane6.setViewportView(categories);

        categoriesTitle.setText("Category:"); // NOI18N

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit Style", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        fontFamilyTitle.setText("Font Style:"); // NOI18N

        fontStyles.setModel(UIConfigurationUtility.getComboModel(getFontStyles()));
        fontStyles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fontStyleChangeHandler(evt);
            }
        });

        colorTitle.setText("Color:"); // NOI18N

        previewText.setText("Sample Text"); // NOI18N

        previewTitle.setText("Preview:"); // NOI18N

        syntaxColorLabel.setText(" "); // NOI18N

        syntaxColorChooser.setText("jButton6"); // NOI18N
        syntaxColorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syntaxColorChooserHandler(evt);
            }
        });

        sampleSyntaxColor.setEnabled(false);
        sampleSyntaxColor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sampleSyntaxColorPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fontFamilyTitle)
                    .addComponent(colorTitle)
                    .addComponent(previewTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(sampleSyntaxColor, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(syntaxColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(syntaxColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fontStyles, 0, 177, Short.MAX_VALUE)
                    .addComponent(previewText))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontFamilyTitle)
                    .addComponent(fontStyles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleSyntaxColor, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syntaxColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syntaxColorChooser)
                    .addComponent(colorTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previewText, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previewTitle))
                .addGap(22, 22, 22))
        );

        fontStyles.getAccessibleContext().setAccessibleParent(fontStyles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(documentTypesTitle)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoriesTitle))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(documentTypesTitle)
                    .addComponent(categoriesTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void sampleSyntaxColorPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sampleSyntaxColorPropertyChange
        if (evt.getPropertyName().equals(BACKGROUND)) {
            // Set the selected color.
            updateAndDisplayPreview();
        }
    }//GEN-LAST:event_sampleSyntaxColorPropertyChange

    private void fontStyleChangeHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fontStyleChangeHandler
        // Set the selected font style
        updateAndDisplayPreview();
    }//GEN-LAST:event_fontStyleChangeHandler

    private void categoryChangeHandler(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryChangeHandler
        if (this.categories.getSelectedIndex() >= 0) {
            this.selectedCategory = (String) this.categories.getSelectedValue();
            this.selectedCategoryIndex = this.categories.getSelectedIndex();
            displayStyle();
        }
    }//GEN-LAST:event_categoryChangeHandler

    private void documentTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_documentTypesValueChanged
        this.selectedDocumentType = (IDocumentType) this.documentTypes.getSelectedValue();
        updateCategories();
    }//GEN-LAST:event_documentTypesValueChanged

    private void syntaxColorChooserHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syntaxColorChooserHandler
        UIConfigurationUtility.colorChooserHandler(this.syntaxColorLabel,
                this.sampleSyntaxColor);
    }//GEN-LAST:event_syntaxColorChooserHandler

    /**
     * Returns a list of supported document types.
     * @return A list of supported document types.
     */
    private List<IDocumentType> getDocumentTypes() {
        return EditorBase.getContext().getEditorProperties().getDocumentTypeBase().getDocumentTypes();
    }

    /**
     * Returns a list of default syntax categories. For a selected document
     * type if syntax category list is not found this list is used.
     * @return a list of default syntax categories.
     */
    private Vector<String> getDefaultSyntaxCategories() {
        return new Vector<String>();
    }

    /**
     * Returns the list of syntax categories for a given document type.
     * @param docType A document type.
     * @return The list of syntax categories for given document type.     
     */
    private List<String> getSyntaxCategories(IDocumentType docType) {
        return docType.getTokens();
    }

    /**
     * Returns the list of syntax categories for selected document type.
     * @return The list of syntax categories for selected document type.
     */
    private List<String> getSyntaxCategories() {
        return getSyntaxCategories((IDocumentType) this.documentTypes.getSelectedValue());
    }

    /**
     * Returns the list of font styles.
     * @return The list of font styles.
     */
    private Vector getFontStyles() {
        return Fonts.getFontStyles();
    }

    /**
     * For a selected document type update the list of syntax categories
     * in the list.
     */
    private void updateCategories() {
        List<String> selectedCategories =
                getSyntaxCategories(getSelectedDocumentType());
        this.selectedDocTypeCategories = selectedCategories;
        this.categories.setModel(UIConfigurationUtility.getListModel(
                selectedCategories));
        categories.setSelectedIndex(0);
    }

    /**
     * Returns the {@code Style} for selected document type and selected synatx category.
     * @return A {@code Style}.
     */
    protected Style getStyleForSelectedDocTypeAndCategory() {
        IDocumentType docType = getSelectedDocumentType();
        int categoryIndex = getSelectedCategoryIndex();
        return getStyle(docType, categoryIndex);
    }

    /**
     * Returns the {@code Style} for a given document type and syntax category name.
     * @param docType A document type.
     * @param category The syntax category name.
     * @return A {@code Style}.
     */
    protected Style getStyle(IDocumentType docType, String category) {
        return this.syntaxStyleConfig.getStyle(docType, category);
    }

    /**
     * Returns the {@code Style} for a given document type and syntax category index.
     * @param docType A document type.
     * @param categoryIndex The index of syntax category in the list.
     * @return A {@code Style}.
     */
    protected Style getStyle(IDocumentType docType, int categoryIndex) {
        return this.syntaxStyleConfig.getStyle(docType, categoryIndex);
    }

    /**
     * Displays a sample text with selected font style and selected font color
     * for selected syntax category.
     */
    private void displayStyle() {
        Style selectedStyle = getStyleForSelectedDocTypeAndCategory();
        // Font Style
        String fontStyle =
                selectedStyle.getFontStyle() == null
                ? Fonts.REGULAR
                : selectedStyle.getFontStyle();
        Color color = selectedStyle.getForeground();

        // Color
        UIConfigurationUtility.showColor(color, syntaxColorLabel,
                sampleSyntaxColor);
        fontStyles.setSelectedItem(fontStyle);
    }

    public void applyConfiguration() {
        this.selectedDocumentType = (IDocumentType) this.documentTypes.getSelectedValue();
        displayCategories();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList categories;
    private javax.swing.JLabel categoriesTitle;
    private javax.swing.JLabel colorTitle;
    private javax.swing.JList documentTypes;
    private javax.swing.JLabel documentTypesTitle;
    private javax.swing.JLabel fontFamilyTitle;
    private javax.swing.JComboBox fontStyles;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel previewText;
    private javax.swing.JLabel previewTitle;
    private javax.swing.JTextField sampleSyntaxColor;
    private javax.swing.JButton syntaxColorChooser;
    private javax.swing.JLabel syntaxColorLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * When document type selection or for a document type syntax category selection
     * or for a combination of document type and syntax category font style or font color
     * changes, this method is invoked to change the preview.
     */
    private void updateAndDisplayPreview() {
        try {
            Vector<Style> styles =
                    this.syntaxStyleConfig.getStylesForDocumentType(
                    getSelectedDocumentType());
            Style selectedStyle = getStyleForSelectedDocTypeAndCategory();

            // Get Font Style
            String fontStyle = (String) fontStyles.getSelectedItem();
            // Get Color
            Color color =
                    ConfigurationUtility.getColor1(
                    this.syntaxColorLabel.getText());

            // update style.
            selectedStyle.setForeground(color);
            selectedStyle.setFontStyle(fontStyle);
            styles.set(getSelectedCategoryIndex(), selectedStyle);

            // Preview.
            previewText.setForeground(color);
            previewText.setFont(new Font(previewText.getFont().getFamily(),
                    Fonts.getIntFontStyle(fontStyle),
                    previewText.getFont().getSize()));
        } catch (NullPointerException np) {
        }
    }

    /**
     * Returns the selected document type.
     * @return The selected document type.
     * @see #setSelectedDocumentType(org.apex.base.data.IDocumentType)
     */
    public IDocumentType getSelectedDocumentType() {
        return this.selectedDocumentType;
    }

    /**
     * Sets the selected document type.
     * @param selectedDocumentType The selected document type.
     * @see #getSelectedDocumentType()
     */
    public void setSelectedDocumentType(IDocumentType selectedDocumentType) {
        this.selectedDocumentType = selectedDocumentType;
    }

    /**
     * Returns the selected syntax category.
     * @return The selected syntax category.
     * @see #setSelectedCategory(java.lang.String)
     */
    public String getSelectedCategory() {
        return this.selectedCategory;
    }

    /**
     * Sets selected syntax category.
     * @param selectedCategory Syntax category.
     * @see #getSelectedCategory()
     */
    public void setSelectedCategory(String selectedCategory) {
        this.selectedCategory = selectedCategory;
    }

    /**
     * Returns a list of syntax categories for selected document type.
     * @return A list of syntax categories.
     * @see #setSelectedDocTypeCategories(java.util.Vector)
     */
    public List<String> getSelectedDocTypeCategories() {
        return this.selectedDocTypeCategories;
    }

    /**
     * Sets syntax categories for selected document type.
     * @param selectedDocTypeCategories A list of syntax categories.
     * @see #getSelectedDocTypeCategories()
     */
    public void setSelectedDocTypeCategories(
            Vector<String> selectedDocTypeCategories) {
        this.selectedDocTypeCategories = selectedDocTypeCategories;
    }

    /**
     * Returns the index of selected syntax category.
     * @return The index of selected syntax category.
     * @see #setSelectedCategoryIndex(int)
     */
    public int getSelectedCategoryIndex() {
        return this.selectedCategoryIndex;
    }

    /**
     *Sets the index of selected syntax category.
     * @param selectedCategoryIndex The index of selected syntax category.
     * @see #getSelectedCategoryIndex()
     */
    public void setSelectedCategoryIndex(int selectedCategoryIndex) {
        this.selectedCategoryIndex = selectedCategoryIndex;
    }
}
