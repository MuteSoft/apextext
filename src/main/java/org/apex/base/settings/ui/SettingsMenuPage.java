/*
 * SettingsMenuPage.java
 * Created on 12 July, 2007, 1:23 AM
 * 
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;
import org.apex.base.component.AbstractIconButton;
import org.apex.base.constant.ColorConstants;
import org.apex.base.settings.EditorConfiguration;
import org.apex.base.util.ImageCreator;

/**
 * The left hand or upper panel in configuration window containing settings menus/buttons.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class SettingsMenuPage extends javax.swing.JPanel {

    /**
     * Contains the last pressed button in configuration window.
     */
    private JButton currentButton;
    /**
     *
     */
    private EditorConfiguration clonedConfig;

    /**
     * Creates a new instance of {@code SettingsMenuPage} using specified cards.
     * @param cards Cards.
     * @param clonedConfig Copy of editor configuration.
     */
    public SettingsMenuPage(JPanel cards, EditorConfiguration clonedConfig) {
        this.setBackground(Color.WHITE);
        this.cards = cards;
        this.clonedConfig = clonedConfig;
        initComponents();
        changeSettingsMenuButtonColor(general);
    }

    /**
     * Changes selected button's style. Also it revert backs the style of last selected menu/button.
     * @param selectedMenuButton Currently selected menu/button.
     */
    private void changeSettingsMenuButtonColor(JButton selectedMenuButton) {
        if (selectedMenuButton == null) {
            return;
        }
        if (currentButton == null) {
            selectedMenuButton.setBackground(
                    ColorConstants.SELECTED_SETTINGS_OPTION_BACKGROUND_COLOR);
            selectedMenuButton.setBorderPainted(true);
            currentButton = selectedMenuButton;
        } else if (this.currentButton != null && !currentButton.getText().
                equalsIgnoreCase(selectedMenuButton.getText())) {
            selectedMenuButton.setBackground(
                    ColorConstants.SELECTED_SETTINGS_OPTION_BACKGROUND_COLOR);
            selectedMenuButton.setBorderPainted(true);
            currentButton.setBackground(null);
            currentButton.setBorderPainted(false);
            currentButton = selectedMenuButton;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        docTemplate = new SettingsMenuButton("template.jpg", "Templates");
        keyBinding = new SettingsMenuButton("keymap.jpg", "Keymap");
        customTools = new SettingsMenuButton("tools.jpg", "Tools");
        general = new SettingsMenuButton("preferences.gif", "General");
        style = new SettingsMenuButton("fontandcolor.jpg", "Style");

        docTemplate.setFocusable(false);
        docTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docTemplateActionPerformed(evt);
            }
        });

        keyBinding.setFocusable(false);
        keyBinding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyBindingActionPerformed(evt);
            }
        });

        customTools.setFocusable(false);
        customTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customToolsActionPerformed(evt);
            }
        });

        general.setFocusable(false);
        general.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generalActionPerformed(evt);
            }
        });

        style.setFocusable(false);
        style.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                styleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(general)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(style, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(docTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyBinding, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customTools, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {customTools, general, keyBinding, style});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(docTemplate)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(general, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(style, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .addComponent(keyBinding, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                        .addComponent(customTools, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {customTools, docTemplate, general, keyBinding, style});

    }// </editor-fold>//GEN-END:initComponents
    private void keyBindingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyBindingActionPerformed
        if (!isCardAvailable("card3")) {
            // KeyMap Page.
            MenuKeyBindingPage keyMapPage =
                    new MenuKeyBindingPage(clonedConfig.getMenuConfig());
            keyMapPage.setName("card3");
            this.cards.add(keyMapPage, "card3");
        }
        ((CardLayout) cards.getLayout()).show(cards, "card3");
        changeSettingsMenuButtonColor(keyBinding);
}//GEN-LAST:event_keyBindingActionPerformed

    private void styleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleActionPerformed
        if (!isCardAvailable("card2")) {
            // Style Page.
            StylePage stylePage =
                    new StylePage(clonedConfig.getStyleConfig());
            stylePage.setName("card2");
            cards.add(stylePage, "card2");
        }
        ((CardLayout) cards.getLayout()).show(cards, "card2");
        changeSettingsMenuButtonColor(style);
    }//GEN-LAST:event_styleActionPerformed

    private void generalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generalActionPerformed
        if (!isCardAvailable("card1")) {
            // General Page.
            GeneralPage generalPage =
                    new GeneralPage(clonedConfig.getGeneralConfig());
            cards.add(generalPage, "card1");
            generalPage.setName("card1");
        }
        ((CardLayout) cards.getLayout()).show(cards, "card1");
        changeSettingsMenuButtonColor(general);
    }//GEN-LAST:event_generalActionPerformed

    private void docTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docTemplateActionPerformed
        if (!isCardAvailable("card4")) {
            // Document Template Page.
            TemplatePage docTemplatePage =
                    new TemplatePage(
                    clonedConfig.getTemplateConfig());
            docTemplatePage.setName("card4");
            cards.add(docTemplatePage, "card4");
        }
        ((CardLayout) cards.getLayout()).show(cards, "card4");
        changeSettingsMenuButtonColor(docTemplate);
    }//GEN-LAST:event_docTemplateActionPerformed

    private void customToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customToolsActionPerformed
        if (!isCardAvailable("card5")) {
            // Tools Page
            ToolsPage toolsPage = new ToolsPage(clonedConfig.getMenuConfig());
            toolsPage.setName("card5");
            cards.add(toolsPage, "card5");
        }
        ((CardLayout) cards.getLayout()).show(cards, "card5");
        changeSettingsMenuButtonColor(customTools);
}//GEN-LAST:event_customToolsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton customTools;
    private javax.swing.JButton docTemplate;
    private javax.swing.JButton general;
    private javax.swing.JButton keyBinding;
    private javax.swing.JButton style;
    // End of variables declaration//GEN-END:variables
    /**
     * A panel containing all cards.
     */
    private JPanel cards;

    /**
     * Determines whether a card is already added to the panel.
     * The name of the component and card are same.
     * @param name The name of the component/card.
     * @return {@code true} if the card is available, otherwise returns {@code false}.
     */
    private boolean isCardAvailable(String name) {
        Component[] comps = cards.getComponents();
        for (int iCount = 0; iCount < comps.length; iCount++) {
            if (name.equalsIgnoreCase(comps[iCount].getName())) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     */
    private class SettingsMenuButton extends AbstractIconButton {

        /**
         * 
         * @param iconName
         * @param text 
         */
        public SettingsMenuButton(String iconName, String text) {
            super(ImageCreator.createImageIcon(SettingsMenuPage.this.getClass(),
                    "images/settings/" + iconName));
            this.setIconTextGap(8);
            this.setText(text);
            setBorder(BorderFactory.createLineBorder(Color.BLACK));
            setBackground(Color.BLUE);
            setToolTipText(text);
        }

        @Override
        protected void doOnClick(ActionEvent e) {
            // do nothing
        }

        /**
         * Paint the border of button when mouse enters
         * the icon button.
         * @param e The mouse event.
         */
        @Override
        public void mouseEntered(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractIconButton) {
                ((AbstractIconButton) component).setBorderPainted(true);
            }
        }

        /**
         * Remove the border when mouse exits the icon button.
         * @param e The mouse event.
         */
        @Override
        public void mouseExited(MouseEvent e) {
            Component component = e.getComponent();
            if (component instanceof AbstractIconButton) {
                if (component != currentButton) {
                    ((AbstractIconButton) component).setBorderPainted(false);
                }
            }
        }
    }
}
