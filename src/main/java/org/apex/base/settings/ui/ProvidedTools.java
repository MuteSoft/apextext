/*
 * ProvidedTools.java
 * Created on 10 April, 2008, 10:40 PM
 * 
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.data.ProvidedTool;
import org.apex.base.settings.ProvidedToolConfiguration;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import org.apex.base.util.EditorUtil;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelEvent;

/**
 * A form to change properties and visibility (in editor) of provided tools.
 * @author Mrityunjoy Saha
 * @version 1.1
 * @since Apex 1.0
 */
public class ProvidedTools extends javax.swing.JPanel implements
        UIConfigurationDataModel {

    /**
     * Provided tool configuration.
     */
    private ProvidedToolConfiguration providedToolConfig;
    /**
     * The selected provided tool.
     */
    private ProvidedTool selectedTool;
    /**
     * The index of selected tool.
     */
    private int selectedToolIndex;

    /**
     * Creates a new instance of {@code ProvidedTools} using given
     * provided tool configuration.
     * @param providedTools Provided tool configuration.
     */
    public ProvidedTools(ProvidedToolConfiguration providedTools) {
        this.providedToolConfig = providedTools;
        initComponents();
        applyConfiguration();
    }

    /**
     * When a tool is selected it updates the value of selected tool index and
     * selected {@code Tool}. Also it displays properties of selected tool.
     */
    private void applyRowSelectionChange() {
        int selectedRow = this.tools.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < this.tools.getRowCount()) {
            this.selectedToolIndex = selectedRow;
            this.selectedTool = this.providedToolConfig.getProvidedTools().get(
                    selectedRow);
            displaySelectedTool();
        } else {
            // No tools           
        }
    }

    /**
     * Displays properties of a selected tool.
     */
    private void displaySelectedTool() {
        if (this.selectedTool != null) {
            this.defaultOptions.setText(this.selectedTool.getOptions());
            this.defaultInputParams.setText(this.selectedTool.getParams());
            //this.externalConsoleReqd.setSelected(this.selectedTool.isExternalConsoleRequired());
            this.inputParamReqd.setSelected(this.selectedTool.
                    isRuntimeParamRequired());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tools =         new JTable(10, 2) {

            public Class<?> getColumnClass(int column) {
                if (convertColumnIndexToModel(column) == 1) {
                    return Boolean.class;
                }
                return super.getColumnClass(column);
            }

            public boolean isCellEditable(int row, int column) {
                if (convertColumnIndexToModel(column) == 1) {
                    return true;
                }
                return false;
            }

            public void valueChanged(ListSelectionEvent e) {
                super.valueChanged(e);
                applyRowSelectionChange();
            }

            public void tableChanged(TableModelEvent e) {
                super.tableChanged(e);
                applyTableValueChange(e);
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        defaultOptions = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        defaultInputParams = new javax.swing.JTextField();
        inputParamReqd = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();

        tools.setModel(UIConfigurationUtility.getDefaultTableModel(getProvidedToolList(),getColumnNames()));
        tools.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tools);

        jLabel1.setText("Available Tools:"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        defaultOptions.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                defaultOptionsKeyReleased(evt);
            }
        });

        jLabel8.setText("Options:"); // NOI18N

        jLabel9.setText("Input Parameters:"); // NOI18N

        defaultInputParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                defaultInputParamsKeyReleased(evt);
            }
        });

        inputParamReqd.setText("At runtime dynamic options and parameters required"); // NOI18N
        inputParamReqd.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputParamReqdStateChanged(evt);
            }
        });

        jLabel3.setText(EditorUtil.getMultipleOptionsNote());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(inputParamReqd)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(defaultInputParams, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(defaultOptions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(defaultOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(defaultInputParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputParamReqd))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                    .addComponent(jPanel1, 0, 337, Short.MAX_VALUE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void inputParamReqdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputParamReqdStateChanged
    this.selectedTool.setRuntimeParamRequired(this.inputParamReqd.isSelected());
}//GEN-LAST:event_inputParamReqdStateChanged

private void defaultOptionsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defaultOptionsKeyReleased
    if (this.defaultOptions.getText() != null) {
        this.selectedTool.setOptions(this.defaultOptions.getText().trim());
    }
}//GEN-LAST:event_defaultOptionsKeyReleased

private void defaultInputParamsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defaultInputParamsKeyReleased
    if (this.defaultInputParams.getText() != null) {
        this.selectedTool.setParams(this.defaultInputParams.getText().trim());
    }
}//GEN-LAST:event_defaultInputParamsKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField defaultInputParams;
    private javax.swing.JTextField defaultOptions;
    private javax.swing.JCheckBox inputParamReqd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tools;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the list of provided tools as a two dimensional array.
     * @return An array of provided tools.
     */
    private Object[][] getProvidedToolList() {
        Vector<ProvidedTool> providedTools = this.providedToolConfig.
                getProvidedTools();
        Object[][] toolListArray = new Object[providedTools.size()][];
        int iCount = 0;
        for (ProvidedTool tool : providedTools) {
            toolListArray[iCount] = new Object[2];
            toolListArray[iCount][1] = tool.isVisible();
            toolListArray[iCount][0] = tool.getDescription();
            iCount++;
        }
        return toolListArray;
    }

    /**
     * Returns the array of column headers for provided tools table.
     * @return An array of column headers.
     */
    private String[] getColumnNames() {
        return new String[]{"Name", "Show"};
    }

    public void applyConfiguration() {
        //  By default select the first row.
        if (this.tools.getRowCount() > 0 &&
                this.tools.getRowSelectionAllowed()) {
            this.tools.setRowSelectionInterval(0, 0);
            applyRowSelectionChange();
        }
    }

    /**
     * Updates the visibility (in editor) of selected provided tool when the corresponding 
     * check box selected or de-selected.
     * @param e The table model event.
     */
    private void applyTableValueChange(TableModelEvent e) {
        if (e != null && e.getType() == TableModelEvent.UPDATE && this.tools != null &&
                e.getColumn() == 1) {
            // Fix for bug id 2824205 (sourceforge.net)
            this.selectedTool.setVisible((Boolean) this.tools.getValueAt(e.
                    getFirstRow(),
                    this.tools.convertColumnIndexToModel(e.getColumn())));
        }
    }
}
