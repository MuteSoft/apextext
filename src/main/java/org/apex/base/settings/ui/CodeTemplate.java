/*
 * CodeTemplate.java
 * Created on 12 July, 2007, 1:04 AM 
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.component.EditorDialog;
import org.apex.base.data.InputParams;
import org.apex.base.data.OutputParams;
import org.apex.base.settings.CodeTemplatesConfiguration;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import java.util.SortedMap;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 * The code templates maintenance page. Using this configuration page
 * code templates can be added or modifed or removed.
 * @author Mrityunjoy Saha
 * @version 1.1
 * @since Apex 1.0
 */
public class CodeTemplate extends javax.swing.JPanel implements
        UIConfigurationDataModel {

    /**
     * Code templates configuration.
     */
    private CodeTemplatesConfiguration codeTemplatesConfig;
    /**
     * The selected abbreviation.
     */
    private String selectedAbbreviation;
    /**
     * The selected code template.
     */
    private String selectedTemplate;

    /**
     * Creates new form {@code CodeTemplate} using given code
     * templates configuration.
     * @param codeTemplatesConfig Code templates configuration.
     */
    public CodeTemplate(
            CodeTemplatesConfiguration codeTemplatesConfig) {
        this.codeTemplatesConfig = codeTemplatesConfig;
        initComponents();        
        applyConfiguration();
    }

    /**
     * Creates a given dialog.
     * @param dialog The dialog window.
     */
    private void createDialog(EditorDialog dialog) {
        dialog.createDialog(new InputParams(), new OutputParams());
    }

    public void applyConfiguration() {
        //  By default select the first row.
        if (this.codeTemplates.getRowCount() > 0
                && this.codeTemplates.getRowSelectionAllowed()) {
            this.codeTemplates.setRowSelectionInterval(0, 0);
            // This method will be called automatically as we are changing the row selection.
            //applyRowSelectionChange();
        }
        checkTemplateListAndChangeButtonStatus();
    }

    /**
     * Based on number of code templates available in the table it enables or disables
     * add, edit, remove buttons on the page.
     */
    private void checkTemplateListAndChangeButtonStatus() {
        if (this.codeTemplates.getRowCount() == 0) {
            this.edit.setEnabled(false);
            this.delete.setEnabled(false);
        } else {
            this.edit.setEnabled(true);
            this.delete.setEnabled(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane10 = new javax.swing.JScrollPane();
        codeTemplates =         new JTable(100, 2) {

            public boolean isCellEditable(int row, int column) {
                return false;
            }

            public void valueChanged(ListSelectionEvent e) {
                super.valueChanged(e);
                applyRowSelectionChange();
            }
        };
        jPanel16 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        editTemplate = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        abbreviation = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        codeTemplates.setModel(UIConfigurationUtility.getDefaultTableModel(getCodeTemplatesAsArray(),getColumnNames()));
        codeTemplates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane10.setViewportView(codeTemplates);
        codeTemplates.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 204))); // NOI18N

        editTemplate.setColumns(20);
        editTemplate.setEditable(false);
        editTemplate.setRows(5);
        editTemplate.setText(getSelectedTemplate());
        jScrollPane11.setViewportView(editTemplate);

        jLabel1.setText("Abbreviation:");

        abbreviation.setText(getSelectedAbbreviation());

        jLabel3.setText("Template:");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abbreviation, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(abbreviation))
                .addGap(5, 5, 5)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                .addContainerGap())
        );

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Expand code template on: Ctrl + Enter");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane10, 0, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete)
                            .addComponent(edit)
                            .addComponent(add)))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add, delete, edit});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)))
                .addGap(3, 3, 3)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        AddCodeTemplateDialog addDialog = new AddCodeTemplateDialog(
                this.codeTemplatesConfig, this.codeTemplates);
        createDialog(addDialog);
        checkTemplateListAndChangeButtonStatus();
    }//GEN-LAST:event_addActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        EditCodeTemplateDialog editDialog = new EditCodeTemplateDialog(
                this.codeTemplatesConfig, this.codeTemplates,
                getSelectedAbbreviation(),
                getSelectedTemplate());
        createDialog(editDialog);
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = this.codeTemplates.getSelectedRow();
        this.codeTemplatesConfig.getCodeTemplates().remove(
                getSelectedAbbreviation());
        ((DefaultTableModel) this.codeTemplates.getModel()).removeRow(
                selectedRow);
        if (this.codeTemplates.getRowCount() >= 1) {
            this.codeTemplates.setRowSelectionInterval(this.codeTemplates.
                    getRowCount()
                    - 1, this.codeTemplates.getRowCount() - 1);
        }
        checkTemplateListAndChangeButtonStatus();
    }//GEN-LAST:event_deleteActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel abbreviation;
    private javax.swing.JButton add;
    private javax.swing.JTable codeTemplates;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JTextArea editTemplate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the selected abbreviation.
     * @return The selected abbreviation.
     * @see #setSelectedAbbreviation(java.lang.String)
     */
    public String getSelectedAbbreviation() {
        return this.selectedAbbreviation;
    }

    /**
     * Returns the selected template text.
     * @return The selected template text.
     * @see #setSelectedTemplate(java.lang.String)
     */
    public String getSelectedTemplate() {
        return this.selectedTemplate;
    }

    /**
     * Returns the table of code templates.
     * @return The table of code templates.
     */
    private SortedMap<String, String> getCodeTemplates() {
        return this.codeTemplatesConfig.getCodeTemplates();
    }

    /**
     * Returns available code templates in a two dimensional array.
     * @return An array of code templates.
     */
    private String[][] getCodeTemplatesAsArray() {
        return UIConfigurationUtility.convertMapTo2DArray(getCodeTemplates());
    }

    /**
     * Sets the selected abbreviation.
     * @param selectedAbbreviation An abbreviation.
     * @see #getSelectedAbbreviation()
     */
    public void setSelectedAbbreviation(String selectedAbbreviation) {
        this.selectedAbbreviation = selectedAbbreviation;
    }

    /**
     * Sets the selected template text.
     * @param selectedTemplate The template text.
     * @see #getSelectedTemplate()
     */
    public void setSelectedTemplate(String selectedTemplate) {
        this.selectedTemplate = selectedTemplate;
    }

    /**
     * Returns an array of column headers for code templates table.
     * @return An array of column headers.
     */
    private String[] getColumnNames() {
        return new String[]{"Abbreviation", "Template"};
    }

    /**
     * Updates selected abbreviation text and selected template
     * text when code template selection changes.
     */
    private void applyRowSelectionChange() {
        int selectedRow = this.codeTemplates.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < this.codeTemplates.getRowCount()) {
            setSelectedAbbreviation(
                    (String) this.codeTemplates.getModel().getValueAt(
                    selectedRow, 0));
            setSelectedTemplate((String) this.codeTemplates.getModel().
                    getValueAt(selectedRow, 1));
            // Change the view.
            abbreviation.setText(getSelectedAbbreviation());
            editTemplate.setText(getSelectedTemplate());
        } else {
            // Remove values
            abbreviation.setText("");
            editTemplate.setText("");
        }
    }
}
