/*
 * CustomTools.java
 * Created on December 11, 2007, 11:38 PM
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.component.EditorDialog;
import org.apex.base.constant.CommonConstants;
import org.apex.base.data.CustomTool;
import org.apex.base.data.InputParams;
import org.apex.base.data.OutputParams;
import org.apex.base.settings.CustomToolConfiguration;
import org.apex.base.settings.ui.AddCustomToolDialog;
import org.apex.base.settings.ui.EditCustomToolDialog;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import java.util.Vector;

/**
 * The custom tools maintenance page. Using this configuration page
 * custom tools can be added or modifed or removed.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class CustomTools extends javax.swing.JPanel implements
        UIConfigurationDataModel {

    /**
     * Custom tool configuration.
     */
    private CustomToolConfiguration customToolConfig;
    /**
     * The selected custom tool.
     */
    private CustomTool selectedTool;
    /**
     * The index of selected custom tool.
     */
    private int selectedToolIndex;

    /** 
     * Creates new form {@code CustomTools} using specified custom tool
     * configuration.
     * @param customToolConfig Custom tool configuration.
     */
    public CustomTools(CustomToolConfiguration customToolConfig) {
        this.customToolConfig = customToolConfig;
        initComponents();
        applyConfiguration();
    }

    /**
     * It displays preview of a tool when a custom tool is selcted in list.
     */
    private void displayToolPreview() {
        this.toolId.setText(getToolId());
        this.toolName.setText(getToolName());
        this.toolDescription.setText(getToolDescription());
        this.toolExecutable.setText(getToolExecutable());
        this.toolMnemonic.setText(getToolMnemonic());
        this.inputParamReqd.setSelected(isInputParamRequired());
    //this.externalConsoleReqd.setSelected(isExternalConsoleRequired());
    }

    /**
     * Creates a given dialog.
     * @param dialog The dialog window.
     */
    private void createDialog(EditorDialog dialog) {
        dialog.createDialog(new InputParams(), new OutputParams());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tools = new javax.swing.JList();
        add = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        moveUp = new javax.swing.JButton();
        moveDown = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        toolName = new javax.swing.JLabel();
        toolDescription = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        inputParamReqd = new javax.swing.JCheckBox();
        toolExecutable = new javax.swing.JLabel();
        toolMnemonic = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        toolId = new javax.swing.JLabel();

        tools.setModel(UIConfigurationUtility.getToolsListModel(getCustomTools()));
        tools.setSelectedIndex(0);
        tools.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                toolsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tools);

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel1.setText("Available Custom Tools:");

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        moveUp.setText("Move Up");
        moveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpActionPerformed(evt);
            }
        });

        moveDown.setText("Move Down");
        moveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Preview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabel2.setText("Name:");

        jLabel3.setText("Description:");

        toolName.setText("Name");

        toolDescription.setText("Description");

        jLabel6.setText("Executable:");

        jLabel7.setText("Mnemonic:");

        inputParamReqd.setText("At runtime dynamic options and parameters required");
        inputParamReqd.setEnabled(false);

        toolExecutable.setText("Executable");

        toolMnemonic.setText("Mnemonic");

        jLabel4.setText("Id:");

        toolId.setText(getToolId());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toolName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toolDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toolId, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(12, 12, 12)
                        .addComponent(toolMnemonic))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toolExecutable, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inputParamReqd))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(toolId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(toolName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(toolDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(toolMnemonic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(toolExecutable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputParamReqd))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveDown))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveDown)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void toolsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_toolsValueChanged
        if (this.tools.getModel().getSize() > 0 &&
                this.tools.getSelectedIndex() == -1) {
            return;
        }
        this.selectedToolIndex = this.tools.getSelectedIndex();
        this.selectedTool =
                this.selectedToolIndex == -1
                ? null
                : this.customToolConfig.getCustomTools().
                get(selectedToolIndex);
        displayToolPreview();
        checkToolListAndChangeButtonStatus();
    }//GEN-LAST:event_toolsValueChanged

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        AddCustomToolDialog addDialog =
                new AddCustomToolDialog(customToolConfig, tools);
        createDialog(addDialog);
}//GEN-LAST:event_addActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        EditCustomToolDialog editDialog =
                new EditCustomToolDialog(customToolConfig, selectedTool, tools);
        createDialog(editDialog);
}//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        Vector<CustomTool> customTools = getCustomTools();
        customTools.removeElementAt(getSelectedToolIndex());
        this.tools.setModel(UIConfigurationUtility.getToolsListModel(
                getCustomTools()));
        this.tools.setSelectedIndex(0);
}//GEN-LAST:event_deleteActionPerformed

    private void moveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpActionPerformed
        if (getCustomTools().size() == 0 || getSelectedToolIndex() == 0) {
            return;
        }
        CustomTool toolToBeMoved = getSelectedTool();
        int indexOfToolToBeMoved = getSelectedToolIndex();
        getCustomTools().removeElementAt(getSelectedToolIndex());
        getCustomTools().insertElementAt(toolToBeMoved,
                (indexOfToolToBeMoved - 1));
        this.tools.setModel(UIConfigurationUtility.getToolsListModel(
                getCustomTools()));
        this.tools.setSelectedIndex(indexOfToolToBeMoved - 1);
}//GEN-LAST:event_moveUpActionPerformed

    private void moveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownActionPerformed
        if (getCustomTools().size() == 0 || (getSelectedToolIndex() == (getCustomTools().
                size() - 1))) {
            return;
        }
        CustomTool toolToBeMoved = getSelectedTool();
        int indexOfToolToBeMoved = getSelectedToolIndex();
        getCustomTools().removeElementAt(getSelectedToolIndex());
        getCustomTools().insertElementAt(toolToBeMoved,
                (indexOfToolToBeMoved + 1));
        this.tools.setModel(UIConfigurationUtility.getToolsListModel(
                getCustomTools()));
        this.tools.setSelectedIndex(indexOfToolToBeMoved + 1);
}//GEN-LAST:event_moveDownActionPerformed

    /**
     * Based on number of custom tools available in the list it enables or disables
     * add, edit, remove buttons on the page.
     */
    private void checkToolListAndChangeButtonStatus() {
        if (this.tools.getModel().getSize() == 0 ||
                this.tools.isSelectionEmpty()) {
            this.edit.setEnabled(false);
            this.delete.setEnabled(false);
            this.moveUp.setEnabled(false);
            this.moveDown.setEnabled(false);
        } else {
            this.edit.setEnabled(true);
            this.delete.setEnabled(true);
            if (getSelectedToolIndex() == 0) {
                this.moveUp.setEnabled(false);
            } else {
                this.moveUp.setEnabled(true);
            }
            if (getSelectedToolIndex() == (getCustomTools().size() - 1)) {
                this.moveDown.setEnabled(false);
            } else {
                this.moveDown.setEnabled(true);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JCheckBox inputParamReqd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveDown;
    private javax.swing.JButton moveUp;
    private javax.swing.JLabel toolDescription;
    private javax.swing.JLabel toolExecutable;
    private javax.swing.JLabel toolId;
    private javax.swing.JLabel toolMnemonic;
    private javax.swing.JLabel toolName;
    private javax.swing.JList tools;
    // End of variables declaration//GEN-END:variables

    /**
     *  Returns a list of available custom tools.
     * @return A list of available custom tools.
     */
    private Vector<CustomTool> getCustomTools() {
        return this.customToolConfig.getCustomTools();
    }

    /**
     * Returns the display text for selected tool's mnemonic.
     * @return The display text for tool mnemonic.
     */
    private String getToolMnemonic() {
        return this.selectedTool == null
                ? CommonConstants.BLANK_TEXT
                : String.valueOf(this.selectedTool.getMnemonic());
    }

    /**
     * Returns the display text for selected tool's executable.
     * @return The display text for selected tool's executable.
     */
    private String getToolExecutable() {
        return this.selectedTool == null
                ? CommonConstants.BLANK_TEXT
                : this.selectedTool.getExecutable();
    }

    /**
     * Returns the display text for selected tool's description.
     * @return The display text for selected tool's description.
     */
    private String getToolDescription() {
        return this.selectedTool == null
                ? CommonConstants.BLANK_TEXT
                : this.selectedTool.getDescription();
    }

    /**
     * Returns the display text for selected tool's Id.
     * @return The display text for selected tool's Id.
     */
    private String getToolId() {
        return this.selectedTool == null
                ? CommonConstants.BLANK_TEXT
                : this.selectedTool.getId();
    }

    /**
     * Returns the display text for selected tool's name.
     * @return The display text for selected tool's name.
     */
    private String getToolName() {
        return this.selectedTool == null
                ? CommonConstants.BLANK_TEXT
                : this.selectedTool.getName();
    }

    /**
     * Returns a boolean that indicates whether or not user has to be prompted
     * for input parameters while executing the selected tool.
     * @return {@code true} if user has to be prompted for input parameters
     *               while executing the selected tool; otherwise returns {@code false}.
     */
    private boolean isInputParamRequired() {
        return this.selectedTool == null
                ? false
                : this.selectedTool.isRuntimeParamRequired();
    }

    public void applyConfiguration() {
        toolsValueChanged(null);
    }

    /**
     * Returns the selected custom tool.
     * @return The selected custom tool.
     */
    public CustomTool getSelectedTool() {
        return selectedTool;
    }

    /**
     * Returns the index of selected custom tool.
     * @return The index of selected custom tool.
     */
    public int getSelectedToolIndex() {
        return selectedToolIndex;
    }
}
