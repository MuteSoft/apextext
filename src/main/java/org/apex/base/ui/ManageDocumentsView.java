/*
 * ManageDocumentsView.java
 * Created on 19 March, 2008, 12:06 AM 
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.ui;

import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.AbstractListModel;
import javax.swing.JDialog;
import javax.swing.ListModel;
import org.apex.base.component.ApexLabel;
import org.apex.base.component.EditorListCellRenderer;
import org.apex.base.core.EditorBase;
import org.apex.base.data.AbstractDocument;
import org.apex.base.data.DocumentWrapper;
import org.apex.base.data.EditorContext;
import org.apex.base.data.InputParams;
import org.apex.base.data.OutputParams;
import org.apex.base.event.GoToFileEventHandler;
import org.apex.base.menu.CloseMultipleFilesMenu;
import org.apex.base.ui.text.UIDialogModel;
import org.apex.base.util.StringUtil;

/**
 * A panel to display all opened documents in a list. Facility to switch to a specific document
 * and close single or multiple documents is provided.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class ManageDocumentsView extends javax.swing.JPanel implements
        UIDialogModel {

    /**
     * The container dialog window.
     */
    private JDialog containerWindow;
    /**
     * A goto file event handler.
     */
    private GoToFileEventHandler goToFileEvent;

    /** 
     * Creates new form {@code ManageDocumentsView}.
     */
    public ManageDocumentsView() {
        initComponents();
        goToFileEvent = new GoToFileEventHandler();
        refreshDocumentList();
    }

    /**
     * Refreshes the document list.
     */
    public void refreshDocumentList() {
        this.docList.setModel(getFileListModel());
        this.docList.setSelectedIndex(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        docList = new javax.swing.JList();
        this.docList.setCellRenderer(new EditorListCellRenderer());
        switchTo = new javax.swing.JButton();
        closeDocs = new javax.swing.JButton();
        close = new javax.swing.JButton();

        jLabel1.setText("Documents:"); // NOI18N

        docList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                docListValueChanged(evt);
            }
        });
        docList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                docListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(docList);

        switchTo.setText("Switch"); // NOI18N
        switchTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchToActionPerformed(evt);
            }
        });

        closeDocs.setText("Close"); // NOI18N
        closeDocs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeDocsActionPerformed(evt);
            }
        });

        close.setText("Cancel"); // NOI18N
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(close)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(switchTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeDocs, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(switchTo)
                    .addComponent(closeDocs)
                    .addComponent(close))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void switchToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchToActionPerformed
        this.getContainerWindow().setVisible(false);
        goToFileEvent.goTo(((ApexLabel) this.docList.getSelectedValue()).
                getToolTipText());
}//GEN-LAST:event_switchToActionPerformed

    private void closeDocsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDocsActionPerformed
        this.getContainerWindow().setVisible(false);
        //ApexLabel[] selectedDocs = (ApexLabel[]) this.docList.getSelectedValues();
        final int[] selectedDocIndices = this.docList.getSelectedIndices();
        new CloseMultipleFilesMenu() {

            @Override
            protected HashMap<String, DocumentWrapper> getDocumentList(
                    InputParams in,
                    OutputParams out) {
                HashMap<String, DocumentWrapper> documentList = new HashMap<String, DocumentWrapper>(
                        selectedDocIndices.length);
                for (int selectedIndex : selectedDocIndices) {
                    String filePath = ((ApexLabel) docList.getModel().
                            getElementAt(
                            selectedIndex)).getToolTipText();
                    if (StringUtil.isNullOrEmpty(filePath)) {
                        continue;
                    }
                    if (!this.getContext().getEditorProperties().
                            isDocumentOpen(filePath)) {
                        continue;
                    }
                    documentList.put(filePath, this.getContext().
                            getEditorProperties().getOpenDocumentWrapper(
                            filePath));
                }
                return documentList;

            }
        }.closeAll(new InputParams(), new OutputParams());
}//GEN-LAST:event_closeDocsActionPerformed

private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
    this.getContainerWindow().setVisible(false);
}//GEN-LAST:event_closeActionPerformed

private void docListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_docListValueChanged
    if (this.docList.getSelectedIndices().length > 1) {
        this.switchTo.setEnabled(false);
    } else {
        this.switchTo.setEnabled(true);
    }
}//GEN-LAST:event_docListValueChanged

private void docListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_docListKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER && switchTo.isEnabled()){
        switchTo.doClick();
    }
}//GEN-LAST:event_docListKeyPressed

    public void setContainerWindow(JDialog window) {
        this.containerWindow = window;
    }

    /**
     * Gets the list of documents from matser list and then prepares 
     * the data model for list of document names.
     * @return A list data model for document names.
     */
    private ListModel getFileListModel() {
        Vector<ApexLabel> fileList = new Vector<ApexLabel>();
        for (Iterator docsIterator = getContext().getEditorProperties().
                getOpenDocumentIterator(); docsIterator.hasNext();) {
            String docName = (String) docsIterator.next();
            AbstractDocument document = getContext().getEditorProperties().
                    getOpenDocument(docName);
            ApexLabel label = new ApexLabel(document.getDisplayName());
            label.setToolTipText(docName);
            fileList.add(label);
        }
        return getFileListModel(fileList);
    }

    /**
     * Returns the data model for list of document names.
     * @param list A list of document names as list of {@code ApexLabel}s.
     * @return A list data model for document names.
     */
    private ListModel getFileListModel(final Vector<ApexLabel> list) {
        return new AbstractListModel() {

            Vector<ApexLabel> tempList = list;

            public Object getElementAt(int index) {
                return tempList.get(index);
            }

            public int getSize() {
                return tempList.size();
            }
        };
    }

    public JDialog getContainerWindow() {
        return this.containerWindow;
    }

    public EditorContext getContext() {
        return EditorBase.getContext();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close;
    private javax.swing.JButton closeDocs;
    private javax.swing.JList docList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton switchTo;
    // End of variables declaration//GEN-END:variables
}
