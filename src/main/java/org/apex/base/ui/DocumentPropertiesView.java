/*
 * DocumentPropertiesView.java
 * Created on 2 November, 2007, 12:59 AM 
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.ui;

import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import org.apex.base.core.EditorBase;
import org.apex.base.data.AbstractDocument;
import org.apex.base.data.EditorContext;
import org.apex.base.data.SegmentCache;
import org.apex.base.ui.text.UIDialogModel;
import java.text.BreakIterator;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Segment;
import org.apex.base.component.SelectableLabel;

/**
 * A panel to display basic properties of a document.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class DocumentPropertiesView extends javax.swing.JPanel implements
        UIDialogModel {

    /**
     * The container dialog window.
     */
    private JDialog containerWindow;
    /**
     * The document for which properties to be displayed.
     */
    private AbstractDocument file;

    /**
     * Creates a new instance of {@code DocumentPropertiesView}.
     */
    public DocumentPropertiesView() {
        initComponents();
    }

    /**
     * Initializes the form with data retrieved from specified document.
     * @param file A document.
     */
    public void initialize(AbstractDocument file) {
        this.file = file;
        setAttributes(file);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        readOnly = new javax.swing.JCheckBox();
        ok = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        characters = new javax.swing.JLabel();
        words = new javax.swing.JLabel();
        lines = new javax.swing.JLabel();
        lastModified = new javax.swing.JLabel();
        fileSize = new javax.swing.JLabel();
        fileType = new javax.swing.JLabel();
        temporary = new javax.swing.JCheckBox();
        location = new SelectableLabel();
        name = new SelectableLabel();
        clipboardCopy = new javax.swing.JButton();

        jLabel1.setText("Name:");

        jLabel3.setText("Path:");

        jLabel4.setText("Characters:");

        jLabel5.setText("Words:");

        jLabel6.setText("Lines:");

        jLabel7.setText("File Type:");

        jLabel8.setText("File Size:");

        jLabel9.setText("Last Modified at:");

        readOnly.setText("Read Only");
        readOnly.setEnabled(false);

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        characters.setText("10000");

        words.setText("1000");

        lines.setText("100");

        lastModified.setText("Timestamp");

        fileSize.setText("10000 Bytes");

        fileType.setText("Type");

        temporary.setText("Temporary");
        temporary.setEnabled(false);

        clipboardCopy.setText("Copy to Clipboard");
        clipboardCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clipboardCopyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastModified, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileType, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lines, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                            .addComponent(characters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(words, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(location, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(readOnly)
                        .addGap(18, 18, 18)
                        .addComponent(temporary))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(clipboardCopy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(characters))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(words))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lines))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fileType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(fileSize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lastModified))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readOnly)
                    .addComponent(temporary))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(clipboardCopy))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        getContainerWindow().setVisible(false);
    }//GEN-LAST:event_okActionPerformed

    private void clipboardCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clipboardCopyActionPerformed
        // Copy displayed properties to clipboard
        StringBuilder documentPropertiesInfo = new StringBuilder();
        documentPropertiesInfo.append("::Document Properties::").append("\n\n");
        documentPropertiesInfo.append("Name: ").append(name.getText()).append(
                "\n");
        documentPropertiesInfo.append("Path: ").append(location.getText()).
                append("\n");
        documentPropertiesInfo.append("Characters: ").append(
                characters.getText()).append("\n");
        documentPropertiesInfo.append("Words: ").append(words.getText()).append(
                "\n");
        documentPropertiesInfo.append("Lines: ").append(lines.getText()).append(
                "\n");
        documentPropertiesInfo.append("File Type: ").append(fileType.getText()).
                append("\n");
        documentPropertiesInfo.append("File Size: ").append(fileSize.getText()).
                append("\n");
        documentPropertiesInfo.append("Last Modified at: ").append(lastModified.
                getText()).append("\n");
        documentPropertiesInfo.append("Read Only: ").append(
                readOnly.isSelected()).append("\n");
        documentPropertiesInfo.append("Temporary: ").append(
                temporary.isSelected());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(
                documentPropertiesInfo.toString()), null);
        getContainerWindow().setVisible(false);
    }//GEN-LAST:event_clipboardCopyActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel characters;
    private javax.swing.JButton clipboardCopy;
    private javax.swing.JLabel fileSize;
    private javax.swing.JLabel fileType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lastModified;
    private javax.swing.JLabel lines;
    private javax.swing.JTextField location;
    private javax.swing.JTextField name;
    private javax.swing.JButton ok;
    private javax.swing.JCheckBox readOnly;
    private javax.swing.JCheckBox temporary;
    private javax.swing.JLabel words;
    // End of variables declaration//GEN-END:variables

    public void setContainerWindow(JDialog window) {
        this.containerWindow = window;
    }

    public JDialog getContainerWindow() {
        return this.containerWindow;
    }

    public EditorContext getContext() {
        return EditorBase.getContext();
    }

    /**
     * Sets document properties in view retrived from given document.
     * @param file A document.
     */
    private void setAttributes(AbstractDocument file) {
        name.setText(file.getName());
        name.selectAll();
        location.setText(file.getAbsolutePath());
        characters.setText(String.valueOf(file.getDocument().getLength()));
        words.setText(String.valueOf(getNoOfWords(file)));
        lines.setText(String.valueOf(getNoOfLines(file)));
        fileType.setText(file.getDocumentType().toString());
        fileSize.setText(String.valueOf((int) Math.ceil((double) file.length()
                / 1024) + " KB"));
        lastModified.setText(new Date(file.lastModified()).toString());
        readOnly.setSelected(!file.isTemporary() && !file.canWrite());
        temporary.setSelected(file.isTemporary());
    }

    /**
     * Calculates number of words present in a document.
     * @param file A document.
     * @return Number of words in the document.
     */
    private long getNoOfWords(AbstractDocument file) {
        try {
            Document doc = file.getDocument();
            Element rootElement = doc.getDefaultRootElement();
            int lineCount = rootElement.getElementCount();
            Element line = null;
            int wordCount = 0;
            Segment seg = SegmentCache.getSharedSegment();
            for (int iCount = 0; iCount < lineCount; iCount++) {
                line = rootElement.getElement(iCount);
                if (line == null) {
                    return wordCount;
                }
                int lineStart = line.getStartOffset();
                int lineEnd = Math.min(line.getEndOffset(), doc.getLength());

                doc.getText(lineStart, lineEnd - lineStart, seg);
                BreakIterator wordsIterator = BreakIterator.getWordInstance(
                        file.getEditor().getLocale());
                wordsIterator.setText(seg);
                int start = wordsIterator.first();
                for (int end = wordsIterator.next(); end != BreakIterator.DONE; start =
                                end, end = wordsIterator.next()) {
                    if (!Character.isWhitespace(seg.array[start])) {
                        wordCount++;
                    }
                }
            }
            SegmentCache.releaseSharedSegment(seg);
            return wordCount;
        } catch (BadLocationException ex) {
            return 0;
        }
    }

    /**
     * Calculates number of lines present in a document.
     * @param file A document.
     * @return Number of lines in the document.
     */
    private long getNoOfLines(AbstractDocument file) {
        return file.getDocument().getDefaultRootElement().getElementCount();
    }
}
