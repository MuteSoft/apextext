/* The following code was generated by JFlex 1.4.1 on 5/28/07 7:11 PM */

/* CLexer.java is a generated file.  You probably want to
 * edit CLexer.lex to make changes.  Use JFlex to generate it.
 * To generate CLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main CLexer.lex</code><br>
 * You will then have a file called CLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2003 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 * Copyright (C) 2003 Elliott Hughes <ehughes@bluearc.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package org.apex.base.highlighter.lexer;

import java.io.*;

/** 
 * CLexer is a c language lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  CLexer shredder = new CLexer(System.in);
 *  CToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * 
 * @see CToken
 */ 


public class CLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;
  public static final int MIDDLE_OF_LINE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 34, 36,  0, 34, 35,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    34, 17, 42,  1, 43, 37, 63, 11,  5,  7, 44, 48, 61, 19, 51,  9, 
    31, 32, 32, 32, 30, 30, 30, 30, 29, 29, 62, 60, 13,  3, 15,  2, 
     0, 28, 28, 28, 28, 49, 50, 33, 33, 33, 33, 33, 45, 33, 33, 33, 
    33, 33, 33, 33, 33, 46, 33, 33, 38, 33, 33,  4,  8,  6, 10, 55, 
     0, 25, 39, 53, 54, 23, 24, 57, 68, 52, 33, 65, 26, 58, 40, 59, 
    56, 64, 21, 27, 20, 22, 41, 67, 47, 69, 66, 12, 16, 14, 18,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\11\25\2\26\1\27"+
    "\1\30\1\31\3\25\1\32\1\33\1\25\1\34\1\35"+
    "\7\25\1\36\1\37\1\40\1\41\1\25\1\4\3\1"+
    "\1\0\1\1\1\0\12\3\1\0\1\42\1\43\1\44"+
    "\1\45\1\46\2\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\26\25\1\63\1\0\1\26\1\63\1\26\1\64\1\63"+
    "\1\65\1\63\1\66\10\25\1\32\1\67\1\70\1\71"+
    "\1\25\1\72\1\73\1\64\1\74\6\25\1\75\5\25"+
    "\1\56\2\25\1\76\1\77\2\25\2\0\2\1\1\45"+
    "\1\0\14\3\1\100\3\3\2\45\2\14\1\0\1\101"+
    "\1\14\1\47\1\14\2\47\1\102\1\103\1\0\1\25"+
    "\1\104\21\25\1\105\1\25\1\106\1\77\7\25\1\0"+
    "\1\26\1\0\2\64\2\65\1\107\3\25\1\110\1\25"+
    "\1\22\3\25\1\32\3\67\2\32\1\13\1\0\1\64"+
    "\1\111\25\25\1\45\15\3\2\100\1\0\2\3\2\45"+
    "\1\112\2\14\1\47\2\14\1\113\2\25\1\114\7\25"+
    "\1\115\1\116\5\25\1\117\1\25\1\120\6\25\1\64"+
    "\1\65\2\107\3\25\1\121\4\25\1\122\1\32\1\123"+
    "\1\67\1\32\1\0\3\25\1\124\4\25\1\125\7\25"+
    "\1\126\6\25\1\127\10\3\2\100\2\3\1\130\1\14"+
    "\2\47\1\25\1\131\6\25\1\132\1\25\1\133\4\25"+
    "\1\134\6\25\1\135\1\107\1\136\1\25\1\21\4\25"+
    "\1\32\2\0\2\25\1\137\1\140\1\25\1\141\1\23"+
    "\10\25\1\55\3\25\1\142\5\3\1\14\1\101\2\25"+
    "\1\143\1\25\1\144\3\25\1\145\1\25\1\146\1\147"+
    "\1\76\1\150\1\151\1\152\1\153\1\154\1\41\1\25"+
    "\1\57\2\25\1\32\1\0\1\46\1\155\3\25\1\156"+
    "\1\157\3\25\1\160\4\25\2\3\2\25\1\161\5\25"+
    "\1\162\3\25\1\163\1\25\1\164\1\25\1\165\2\25"+
    "\1\166\1\167\1\170\1\25\1\171\1\172\2\25\1\173"+
    "\1\174\3\25\1\175\1\176\2\25\1\177\2\25\1\200"+
    "\2\25\1\201\2\25\1\202\2\25\1\203\3\25\1\204";

    /**
     * 
     * @return 
     */
  private static int [] zzUnpackAction() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

    /**
     * 
     * @param packed 
     * @param offset 
     * @param result 
     * @return 
     */
  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u01ea\0\u0302"+
    "\0\u01ea\0\u0348\0\u038e\0\u03d4\0\u01ea\0\u041a\0\u0460\0\u04a6"+
    "\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6"+
    "\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u01ea\0\u01ea\0\u01ea\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u01ea\0\u01ea\0\u11c6\0\u120c\0\u01ea\0\u1252"+
    "\0\u1298\0\u12de\0\u01ea\0\u01ea\0\u1324\0\u01ea\0\u136a\0\u13b0"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u01ea\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u01ea\0\u01ea\0\u1f2c\0\u01ea\0\u01ea\0\u1f72\0\u0690\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u01ea\0\u01ea"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u01ea\0\u2bc0\0\u2c06"+
    "\0\u2c4c\0\u2c92\0\u2cd8\0\u01ea\0\u01ea\0\u2d1e\0\u2d64\0\u0690"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94"+
    "\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4"+
    "\0\u320a\0\u0690\0\u3250\0\u0690\0\u3296\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u19fa\0\u350c\0\u3552"+
    "\0\u19fa\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u0690"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u01ea\0\u0690\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a"+
    "\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u01ea\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u0690"+
    "\0\u47a4\0\u47ea\0\u0690\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948"+
    "\0\u498e\0\u49d4\0\u0690\0\u0690\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec"+
    "\0\u4b32\0\u0690\0\u4b78\0\u0690\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u19fa\0\u4da8\0\u4dee\0\u4e34\0\u4e7a"+
    "\0\u4ec0\0\u0690\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u0690\0\u501e"+
    "\0\u01ea\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u0690"+
    "\0\u5208\0\u524e\0\u5294\0\u52da\0\u0690\0\u5320\0\u5366\0\u53ac"+
    "\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u0690\0\u550a\0\u5550\0\u5596"+
    "\0\u55dc\0\u5622\0\u5668\0\u01ea\0\u56ae\0\u56f4\0\u573a\0\u5780"+
    "\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0"+
    "\0\u01ea\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u0690\0\u5b0e\0\u5b54"+
    "\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u0690\0\u5cb2\0\u0690\0\u5cf8"+
    "\0\u5d3e\0\u5d84\0\u5dca\0\u0690\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2"+
    "\0\u5f28\0\u5f6e\0\u0690\0\u19fa\0\u0690\0\u5fb4\0\u0690\0\u5ffa"+
    "\0\u6040\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a"+
    "\0\u0690\0\u0690\0\u6270\0\u62b6\0\u0690\0\u62fc\0\u6342\0\u6388"+
    "\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u0690\0\u652c\0\u6572"+
    "\0\u65b8\0\u0690\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c"+
    "\0\u2aee\0\u67a2\0\u67e8\0\u0690\0\u682e\0\u0690\0\u6874\0\u68ba"+
    "\0\u6900\0\u0690\0\u6946\0\u0690\0\u0690\0\u0690\0\u0690\0\u698c"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u69d2\0\u0690\0\u6a18\0\u6a5e"+
    "\0\u6aa4\0\u6aea\0\u0690\0\u0690\0\u6b30\0\u6b76\0\u6bbc\0\u0690"+
    "\0\u0690\0\u6c02\0\u6c48\0\u6c8e\0\u0690\0\u6cd4\0\u6d1a\0\u6d60"+
    "\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u0690\0\u6f04\0\u6f4a"+
    "\0\u6f90\0\u6fd6\0\u701c\0\u0690\0\u7062\0\u70a8\0\u70ee\0\u0690"+
    "\0\u7134\0\u0690\0\u717a\0\u0690\0\u71c0\0\u7206\0\u0690\0\u0690"+
    "\0\u0690\0\u724c\0\u0690\0\u0690\0\u7292\0\u72d8\0\u0690\0\u0690"+
    "\0\u731e\0\u7364\0\u73aa\0\u0690\0\u0690\0\u73f0\0\u7436\0\u0690"+
    "\0\u747c\0\u74c2\0\u0690\0\u7508\0\u754e\0\u0690\0\u7594\0\u75da"+
    "\0\u0690\0\u7620\0\u7666\0\u0690\0\u76ac\0\u76f2\0\u7738\0\u0690";

    /**
     * 
     * @return 
     */
  private static int [] zzUnpackRowMap() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

    /**
     * 
     * @param packed 
     * @param offset 
     * @param result 
     * @return 
     */
  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\1\40"+
    "\1\37\1\42\2\43\1\44\1\37\1\45\1\46\1\47"+
    "\1\50\1\4\1\51\2\37\1\52\1\53\2\37\1\54"+
    "\1\55\1\56\1\57\1\37\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\3\37\1\70\2\37\2\4"+
    "\1\71\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\1\40\1\37\1\42"+
    "\2\43\1\44\1\37\1\45\1\46\1\47\1\50\1\4"+
    "\1\51\2\37\1\52\1\53\2\37\1\54\1\55\1\56"+
    "\1\57\1\37\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\3\37\1\70\2\37\2\72\1\73\5\72"+
    "\1\74\1\75\30\72\1\76\2\43\41\72\2\4\1\77"+
    "\5\0\1\4\13\0\16\4\4\0\4\4\1\0\1\4"+
    "\1\0\3\4\1\0\2\4\1\0\10\4\4\0\6\4"+
    "\2\100\1\101\5\102\1\4\1\0\12\102\2\100\1\103"+
    "\1\104\2\100\1\105\7\100\1\106\2\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\1\107"+
    "\1\100\1\110\1\100\1\111\3\100\4\102\6\100\2\0"+
    "\1\112\106\0\1\113\213\0\1\114\5\0\1\115\42\0"+
    "\1\116\34\0\1\117\102\0\2\120\1\121\5\120\1\122"+
    "\2\120\1\123\27\120\2\0\41\120\3\0\1\124\11\0"+
    "\1\125\73\0\1\126\13\0\1\127\70\0\1\130\1\131"+
    "\14\0\1\132\70\0\1\133\105\0\1\134\13\0\1\135"+
    "\3\0\1\136\62\0\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\137\1\37\1\140\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\4\37\1\141\1\142\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\143\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\144\6\37\4\0"+
    "\2\37\1\145\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\146\7\37\4\0\2\37\1\147"+
    "\1\37\1\0\1\37\1\0\2\37\1\150\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\151\3\37\1\152\1\153\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\154\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\155\4\37\1\156\6\37\4\0\2\37"+
    "\1\157\1\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\160\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\161\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\162"+
    "\7\37\4\0\3\37\1\163\1\164\1\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\165\1\166\5\0\1\165\13\0\2\165\1\167\1\170"+
    "\2\165\1\171\2\165\4\40\1\165\4\0\4\165\1\0"+
    "\1\165\1\0\1\171\1\167\1\165\1\0\1\170\1\165"+
    "\1\172\10\165\4\0\10\165\1\166\5\0\1\165\13\0"+
    "\2\165\1\167\1\170\2\165\1\171\2\165\1\173\3\174"+
    "\1\165\4\0\1\175\3\165\1\0\1\165\1\0\1\171"+
    "\1\167\1\175\1\0\1\170\1\165\1\172\10\165\4\0"+
    "\6\165\42\0\1\42\2\43\103\0\3\43\44\0\1\176"+
    "\102\0\2\4\1\77\5\0\1\4\13\0\1\37\1\177"+
    "\14\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\200\6\37\1\201\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\202\1\37\1\203"+
    "\10\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\7\37\1\204\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\205\6\37\1\206"+
    "\4\0\6\37\2\50\1\207\5\50\1\210\32\50\2\0"+
    "\5\50\1\211\33\50\3\0\1\212\102\0\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\7\37\1\213\4\0"+
    "\6\37\3\0\1\214\54\0\1\215\62\0\4\216\45\0"+
    "\2\4\1\77\5\0\1\4\13\0\4\37\1\217\11\37"+
    "\4\0\2\37\1\220\1\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\221\1\222\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\223\4\0\4\37\1\224\1\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\225\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\7\37"+
    "\1\226\4\0\5\37\1\227\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\230\1\231\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\232\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\233\13\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\234\14\37"+
    "\4\0\3\37\1\235\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\4\37\1\236\3\37\4\0\6\37\3\0"+
    "\1\237\73\0\1\240\6\0\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\1\37\1\241\6\37\4\0\4\37"+
    "\1\242\1\37\2\0\1\243\103\0\2\72\1\73\5\72"+
    "\1\74\1\244\31\72\2\0\43\72\1\245\5\72\1\74"+
    "\1\244\31\72\2\0\43\72\1\73\5\72\1\74\1\244"+
    "\31\72\1\246\44\72\1\73\5\72\1\74\1\115\31\72"+
    "\2\0\7\72\1\247\33\72\1\73\5\72\1\74\1\244"+
    "\30\72\1\76\2\43\41\72\2\0\1\250\103\0\2\100"+
    "\1\101\5\102\1\4\1\0\12\102\16\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\10\100\4\102\6\100\2\102\1\251\5\102\2\0\30\102"+
    "\3\0\51\102\2\0\30\102\3\0\41\102\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\2\100"+
    "\1\252\1\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\1\100\1\253\4\100\1\254\7\100\3\0\1\102"+
    "\2\100\1\255\1\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\10\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\256\7\100\4\102"+
    "\6\100\10\102\2\0\14\102\1\257\1\260\2\102\1\261"+
    "\7\102\1\106\2\0\17\102\1\262\1\102\1\263\1\102"+
    "\1\264\15\102\2\100\1\101\5\102\1\4\1\0\12\102"+
    "\4\100\1\265\11\100\3\0\1\102\2\100\1\266\1\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\3\100"+
    "\1\267\12\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\1\100\1\270\14\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\3\0\1\5\1\0\1\10"+
    "\1\0\1\12\1\0\1\4\1\0\1\15\1\0\1\17"+
    "\1\0\1\21\1\0\1\23\1\0\1\25\62\0\43\115"+
    "\2\0\41\115\54\271\1\272\31\271\2\273\1\274\5\273"+
    "\1\275\2\273\1\276\27\273\2\0\43\273\1\277\5\273"+
    "\1\275\2\273\1\276\27\273\2\0\43\273\1\300\5\273"+
    "\1\120\2\273\1\120\4\273\1\301\3\273\2\120\2\273"+
    "\2\120\4\273\1\302\2\303\2\273\2\0\1\273\1\301"+
    "\4\120\4\273\1\301\26\273\3\0\1\304\105\0\1\305"+
    "\104\0\1\306\103\0\2\4\1\77\5\0\1\4\13\0"+
    "\2\37\1\307\13\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\5\37\1\310"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\6\37"+
    "\1\311\1\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\312\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\313\7\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\4\37\1\314\3\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\315\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\316\4\37\1\317"+
    "\2\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\320\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\7\37\1\321\6\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\322"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\7\37\1\323\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\2\37\1\324\13\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\325\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\4\37\1\326\3\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\327"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\6\37\1\330\7\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\7\37\1\331"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\37"+
    "\1\332\14\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\333\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\6\37\1\334\1\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\2\37\1\335\5\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\2\37\1\336\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\37\1\337\3\37\1\340\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\5\37\1\341\2\37\4\0\2\37\1\342"+
    "\3\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\1\343\7\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\344\4\0\6\37\2\165"+
    "\1\166\5\0\1\165\13\0\16\165\4\0\4\165\1\0"+
    "\1\165\1\0\3\165\1\0\13\165\4\0\6\165\2\0"+
    "\1\345\103\0\2\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\346\7\165\4\0\4\165\1\0\1\165\1\0\1\346"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\12\0\1\347\11\165\4\350\1\165\4\0\4\165\1\0"+
    "\1\165\1\0\3\165\1\347\13\165\4\0\10\165\1\166"+
    "\5\0\1\165\13\0\2\165\1\346\13\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\165\1\346\1\165\1\0\13\165"+
    "\4\0\10\165\1\166\5\0\1\165\13\0\3\165\1\170"+
    "\1\351\1\165\1\351\2\165\4\172\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\351\2\165\1\0\1\170\1\351"+
    "\11\165\4\0\10\165\1\166\5\0\1\165\13\0\3\165"+
    "\1\170\5\165\4\173\1\165\4\0\4\165\1\0\1\165"+
    "\1\0\3\165\1\0\1\170\1\165\1\172\10\165\4\0"+
    "\10\165\1\166\5\0\1\165\13\0\2\165\1\352\1\170"+
    "\2\165\1\353\2\165\1\173\3\174\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\353\1\352\1\165\1\0\1\170"+
    "\1\165\1\172\10\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\3\165\3\354\2\165\5\354\1\165\4\0\1\165"+
    "\1\354\2\165\1\0\1\165\1\0\3\165\1\0\2\354"+
    "\2\165\2\354\5\165\4\0\6\165\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\355\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\356\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\357\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\3\37\1\360\2\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\6\37\1\361\1\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\362\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\37"+
    "\1\363\14\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\364\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\365"+
    "\7\37\4\0\6\37\2\50\1\366\5\50\1\367\32\50"+
    "\2\0\5\50\1\211\33\50\2\370\1\50\5\370\1\50"+
    "\2\370\1\50\4\370\1\371\3\370\2\50\2\370\2\50"+
    "\4\370\3\50\2\370\1\372\1\373\1\370\1\371\3\50"+
    "\1\373\4\370\1\371\26\370\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\374\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\27\0\1\375\1\376\1\0\1\376\2\0\4\216\14\0"+
    "\1\376\3\0\1\375\1\376\23\0\2\4\1\77\5\0"+
    "\1\4\13\0\1\377\5\37\1\u0100\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0101"+
    "\6\37\1\u0102\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0103\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\2\37\1\u0104\1\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\6\37\1\u0105\1\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\5\37\1\u0106"+
    "\10\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\4\37\1\u0107\1\37\1\u0108\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\2\37\1\u0109\13\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u010a"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u010b\6\37\1\u010c\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u010d"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u010e\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u010f\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\3\37\1\u0110\4\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u0111\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0112"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\4\37\1\u0113"+
    "\1\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\1\u0114\7\37\4\0\6\37\3\0\1\4\1\0\1\10"+
    "\1\0\1\12\1\0\1\4\1\0\1\15\1\0\1\17"+
    "\1\0\1\21\1\0\1\23\1\0\1\25\62\0\2\72"+
    "\1\73\5\72\1\74\1\0\31\72\2\0\7\72\1\0"+
    "\33\72\1\245\5\72\2\74\31\72\2\0\43\72\1\73"+
    "\5\72\1\74\1\244\31\72\1\0\42\72\54\247\1\u0115"+
    "\31\247\3\0\1\4\5\0\1\4\74\0\3\102\1\100"+
    "\4\102\1\0\1\4\30\102\3\0\41\102\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\2\100"+
    "\1\u0116\5\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\1\100\1\u0117\14\100\3\0\1\102\4\100\1\102"+
    "\1\100\1\102\3\100\1\102\2\100\1\102\10\100\4\102"+
    "\10\100\1\101\5\102\1\4\1\0\12\102\7\100\1\u0118"+
    "\6\100\3\0\1\102\4\100\1\102\1\100\1\102\3\100"+
    "\1\102\2\100\1\102\1\u0119\7\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\2\100"+
    "\1\u011a\5\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\16\100\3\0\1\102\2\100\1\u0118\1\100\1\102"+
    "\1\100\1\102\3\100\1\102\2\100\1\102\10\100\4\102"+
    "\6\100\10\102\2\0\30\102\3\0\3\102\1\u011b\45\102"+
    "\2\0\13\102\1\u011c\4\102\1\u011d\7\102\3\0\3\102"+
    "\1\u011e\45\102\2\0\30\102\3\0\17\102\1\u011f\31\102"+
    "\2\0\16\102\1\265\11\102\3\0\3\102\1\u0120\45\102"+
    "\2\0\15\102\1\u0121\12\102\3\0\51\102\2\0\13\102"+
    "\1\u0122\14\102\3\0\41\102\2\265\1\u0123\5\265\1\u0124"+
    "\1\u0125\31\265\2\0\41\265\2\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\100\1\u0126\6\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\4\100"+
    "\1\105\11\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\5\100\1\u0127\10\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\54\271\1\u0128\31\271\11\u0129"+
    "\1\u012a\42\u0129\1\272\31\u0129\2\273\1\274\5\273\1\275"+
    "\2\273\1\123\27\273\2\0\43\273\1\u012b\5\273\1\275"+
    "\2\273\1\123\27\273\2\0\104\273\2\0\43\273\1\u012b"+
    "\1\120\1\273\1\120\1\273\1\120\1\275\1\u012c\1\273"+
    "\1\u012d\1\273\1\120\1\273\1\120\1\273\1\120\1\273"+
    "\1\120\17\273\2\0\43\273\1\u012e\5\273\1\275\2\273"+
    "\1\276\27\273\2\0\43\273\1\274\5\273\1\275\2\273"+
    "\1\123\13\273\3\u012f\2\273\5\u012f\2\273\2\0\2\273"+
    "\1\u012f\11\273\2\u012f\2\273\2\u012f\21\273\1\274\5\273"+
    "\1\275\2\273\1\276\22\273\3\120\2\273\2\0\43\273"+
    "\1\274\5\273\1\275\2\273\1\276\22\273\3\302\2\273"+
    "\2\0\41\273\21\0\1\132\64\0\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u0130\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\4\37\1\u0131\3\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\7\37\1\u0132\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\7\37\1\u0133\6\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\3\37\1\u0134\12\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\2\37\1\u0135\13\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u0136\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0137"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\2\37\1\u0138\1\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\1\u0139\7\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u013a\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u013b\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\6\37\1\u013c\1\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u013d\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\6\37\1\u013e"+
    "\7\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\7\37\1\u013f\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\u0140\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\7\37"+
    "\1\307\6\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u0141\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u0142\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\3\37\1\u0143\4\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\5\37\1\u0144\2\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\2\37\1\u0145\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u0146\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u0147\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u0148\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\u0149\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u014a\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\3\0\1\165\5\0\1\165\131\0"+
    "\4\u014b\45\0\2\165\1\166\5\0\1\165\13\0\4\165"+
    "\1\351\1\165\1\351\2\165\4\350\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\351\2\165\1\0\1\165\1\351"+
    "\11\165\4\0\10\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\u014c\7\165\4\0\4\165\1\0\1\165\1\0\1\u014c"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\2\165\1\u014c\13\165\4\0\4\165\1\0\1\165"+
    "\1\0\1\165\1\u014c\1\165\1\0\13\165\4\0\10\165"+
    "\1\166\5\0\1\165\13\0\2\165\1\u014d\3\354\1\u014e"+
    "\1\165\5\354\1\165\4\0\1\165\1\354\2\165\1\0"+
    "\1\165\1\0\1\u014e\1\u014d\1\165\1\0\2\354\2\165"+
    "\2\354\5\165\4\0\6\165\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u014f\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\5\37\1\u0150\10\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u0151\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\u0152\7\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0153"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\3\37\1\u0154\4\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u0155\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u0156\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\2\37"+
    "\1\u0157\5\37\4\0\6\37\2\50\1\u0158\5\50\1\367"+
    "\1\210\31\50\2\0\5\50\1\211\33\50\2\370\1\50"+
    "\5\370\1\50\2\370\1\50\4\370\1\371\3\370\2\50"+
    "\2\370\2\50\4\370\3\50\2\370\2\0\1\370\1\371"+
    "\3\50\1\373\4\370\1\371\71\370\2\0\5\370\1\u0159"+
    "\62\370\3\u015a\2\370\5\u015a\2\370\2\0\2\370\1\u015a"+
    "\2\370\1\u0159\6\370\2\u015a\2\370\2\u015a\17\370\2\373"+
    "\1\u015b\5\373\1\u015c\32\373\1\0\6\373\1\211\35\373"+
    "\1\u015b\5\373\1\u015c\32\373\2\0\5\373\1\211\33\373"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u015d\4\37\4\0\6\37\23\0\1\347\11\0\4\u014b"+
    "\17\0\1\347\25\0\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u015e\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u015f\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\3\37"+
    "\1\u0160\12\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\7\37\1\u0161\6\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0162"+
    "\6\37\1\u0163\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\4\37\1\u0164"+
    "\3\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u0165\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0166\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0167\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u0168"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\5\37\1\u0169\10\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\3\37\1\u016a"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u016b"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\u016c\7\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\u016d\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u016e\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u016f\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\u0170\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\u0171\14\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u0172\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\6\37\1\u0173\7\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\11\247\1\u0174\42\247\1\u0115"+
    "\31\247\2\100\1\101\5\102\1\4\1\0\12\102\3\100"+
    "\1\u0119\12\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\7\100"+
    "\1\u0175\4\102\10\100\1\101\5\102\1\4\1\0\12\102"+
    "\3\100\1\265\12\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\10\100\4\102\10\100"+
    "\1\101\5\102\1\4\1\0\12\102\4\100\1\265\11\100"+
    "\3\0\1\102\4\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\10\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\u0119\7\100\4\102"+
    "\6\100\10\102\2\0\30\102\3\0\21\102\1\u0176\27\102"+
    "\2\0\13\102\1\u0177\14\102\3\0\51\102\2\0\21\102"+
    "\1\u0178\6\102\3\0\17\102\1\u0179\31\102\2\0\30\102"+
    "\3\0\21\102\1\u017a\27\102\2\0\30\102\3\0\3\102"+
    "\1\u0178\45\102\2\0\30\102\3\0\20\102\1\u017b\30\102"+
    "\2\0\16\102\1\261\11\102\3\0\51\102\2\0\17\102"+
    "\1\u017c\10\102\3\0\41\102\2\265\1\u017d\5\265\1\u0124"+
    "\1\u0125\31\265\2\0\43\265\1\u0123\5\265\1\u0124\1\u0125"+
    "\31\265\1\u017e\44\265\1\u0123\5\265\1\u0124\1\0\31\265"+
    "\2\0\7\265\1\0\31\265\2\100\1\101\5\102\1\4"+
    "\1\0\12\102\6\100\1\u017f\7\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\16\100"+
    "\3\0\1\102\4\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\5\100\1\u0180\2\100\4\102\6\100\11\271"+
    "\1\u0181\42\271\1\u0128\31\271\54\u0129\1\272\31\u0129\2\273"+
    "\1\u012b\5\273\1\275\1\u0182\1\273\1\123\27\273\2\0"+
    "\43\273\1\u0183\5\273\1\u0184\2\273\1\120\4\273\1\301"+
    "\3\273\2\120\2\273\2\120\4\273\1\302\2\303\2\273"+
    "\2\0\1\273\1\301\4\120\4\273\1\301\26\273\13\0"+
    "\1\276\72\0\2\273\1\u012b\5\273\1\275\1\120\1\273"+
    "\1\123\27\273\2\0\43\273\1\274\5\273\1\275\2\273"+
    "\1\123\13\273\3\120\2\273\5\120\2\273\2\0\2\273"+
    "\1\120\11\273\2\120\2\273\2\120\17\273\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u0185\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\3\37\1\u0186\2\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\2\37\1\u0187\1\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0188"+
    "\1\37\1\u0189\5\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\37\1\u018a\14\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u018b\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\7\37\1\u018c\6\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\5\37"+
    "\1\u018d\2\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\5\37\1\u018e\2\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\2\37"+
    "\1\u018f\1\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\u0190\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0191"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u0192\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u0193"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u0194\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\u0195\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u0196\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\u0197\7\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0198"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\7\37\1\u0199\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\37"+
    "\1\u019a\6\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\u019b\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\30\0"+
    "\1\376\1\0\1\376\2\0\4\u014b\14\0\1\376\4\0"+
    "\1\376\23\0\2\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\u019c\7\165\4\0\4\165\1\0\1\165\1\0\1\u019c"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\2\165\1\u019c\13\165\4\0\4\165\1\0\1\165"+
    "\1\0\1\165\1\u019c\1\165\1\0\13\165\4\0\6\165"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\1\37\1\u019d\4\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u019e\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\u019f\14\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\7\37\1\u01a0\6\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01a1\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\u01a2\13\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u01a3\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\50\1\u0158\5\50\2\367\31\50"+
    "\2\0\5\50\1\211\33\50\27\370\3\50\2\370\5\50"+
    "\2\370\2\0\2\370\1\50\2\370\1\u0159\6\370\2\50"+
    "\2\370\2\50\17\370\2\373\1\u01a4\5\373\1\u01a5\32\373"+
    "\2\0\5\373\1\211\33\373\2\0\1\373\5\0\1\373"+
    "\2\0\1\373\4\0\1\u01a6\3\0\2\373\2\0\2\373"+
    "\4\0\3\373\2\0\1\372\1\373\1\0\1\u01a6\4\373"+
    "\4\0\1\u01a6\26\0\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01a7\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u01a8"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\4\37\1\u01a9\1\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u01aa\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u01ab\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u01ac\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\6\37\1\u01ad"+
    "\7\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\2\37\1\u01ae\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u01af\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\6\37\1\u01b0\7\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\6\37"+
    "\1\u01b1\1\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u01b2\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01b3\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\1\u01b4\7\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u01b5"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\1\u01b6\5\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01b7\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\5\37"+
    "\1\u01b8\10\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\37\1\u01b9\14\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\3\37"+
    "\1\u01ba\12\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\1\100\1\265\14\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\10\102\2\0\15\102\1\u0179"+
    "\12\102\3\0\51\102\2\0\30\102\3\0\26\102\1\u01bb"+
    "\22\102\2\0\15\102\1\265\12\102\3\0\51\102\2\0"+
    "\16\102\1\265\11\102\3\0\51\102\2\0\30\102\3\0"+
    "\17\102\1\u0179\31\102\2\0\20\102\1\u01bc\7\102\3\0"+
    "\51\102\2\0\30\102\3\0\24\102\1\u01bd\14\102\2\265"+
    "\1\u017d\5\265\2\u0124\31\265\2\0\43\265\1\u0123\5\265"+
    "\1\u0124\1\u0125\31\265\1\0\42\265\2\100\1\101\5\102"+
    "\1\4\1\0\12\102\2\100\1\u01be\13\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\10\100\4\102\10\100\1\101\5\102\1\4\1\0\12\102"+
    "\16\100\3\0\1\102\4\100\1\102\1\100\1\102\3\100"+
    "\1\102\2\100\1\102\6\100\1\u01bf\1\100\4\102\6\100"+
    "\2\273\1\274\5\273\1\u0182\32\273\2\0\43\273\1\u01c0"+
    "\5\273\1\275\2\273\1\276\27\273\2\0\43\273\1\274"+
    "\5\273\1\u0182\2\273\1\u01c1\27\273\2\0\41\273\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u01c2\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\5\37\1\u01c3\10\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u01c4"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01c5\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u01c6"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01c7\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\u01c8\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\2\37\1\u01c9\1\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\2\37\1\u01ca\1\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u01cb\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u01cc\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\2\37\1\u01cd\5\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\1\u01ce\5\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u01cf\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u01d0\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u01d1"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\4\37\1\u01d2\11\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\4\37\1\u01d3\1\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u01d4\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\4\37\1\u01d5"+
    "\3\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\1\u01d6\5\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u01d7\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\u01d8\7\37\4\0\6\37\2\373\1\u01d9\5\373"+
    "\1\u01a5\1\u015c\31\373\2\0\5\373\1\211\33\373\2\0"+
    "\1\373\5\0\1\373\2\0\1\373\4\0\1\u01a6\3\0"+
    "\2\373\2\0\2\373\4\0\3\373\5\0\1\u01a6\4\373"+
    "\4\0\1\u01a6\55\0\3\u01da\2\0\5\u01da\6\0\1\u01da"+
    "\11\0\2\u01da\2\0\2\u01da\17\0\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\1\u01db\5\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01dc\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u01dd\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u01de\4\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\6\37\1\u01df\7\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01e0\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\3\37\1\u01e1\12\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u01e2"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u01e3\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u01e4\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u01e5\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01e6\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u01e7\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u01e8\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u01e9\4\37\4\0\6\37\10\102\2\0\13\102\1\265"+
    "\14\102\3\0\51\102\2\0\14\102\1\u01ea\13\102\3\0"+
    "\51\102\2\0\30\102\3\0\25\102\1\u01eb\13\102\2\100"+
    "\1\101\5\102\1\4\1\0\12\102\16\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\2\100\1\u0118\5\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\5\100\1\265\10\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\6\100\2\273\1\u012b\5\273\1\275\1\u0184\1\273"+
    "\1\123\27\273\2\0\41\273\2\4\1\77\5\0\1\4"+
    "\13\0\1\u01ec\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\6\37\1\u01ed"+
    "\1\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\4\37\1\u01ee\11\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u01ef\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01f0\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u01f1\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u0192\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\3\37\1\u01f2\4\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\5\37"+
    "\1\u01f3\10\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01f4\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\6\37"+
    "\1\u01f5\7\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\373\1\u01d9"+
    "\5\373\2\u01a5\31\373\2\0\5\373\1\211\33\373\27\0"+
    "\3\373\2\0\5\373\6\0\1\373\11\0\2\373\2\0"+
    "\2\373\17\0\2\4\1\77\5\0\1\4\13\0\2\37"+
    "\1\u01f6\13\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u01f7\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u01f8"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\1\37\1\u01f9\6\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u01fa"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u01fb\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01fc\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u01fd\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\7\37"+
    "\1\u01fe\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u01ff\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\10\102\2\0"+
    "\30\102\3\0\21\102\1\u0178\27\102\2\0\17\102\1\265"+
    "\10\102\3\0\41\102\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0200\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u0201\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\4\37\1\u0202\3\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u0203\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u0204\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\1\37\1\u0205"+
    "\6\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u0206\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u0207\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0208\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0209\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\3\37\1\u020a\4\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u020b\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u020c\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u020d\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u020e\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u020f\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0210\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u0211\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u0212\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u0213"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0214\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u0215\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u0216\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u0217\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0218"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u0219\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\7\37\1\u021a\6\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\3\37\1\u021b\4\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u021c\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u021d\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u021e\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\7\37\1\u021f\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\u0220\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37";

    /**
     * 
     * @return 
     */
  private static int [] zzUnpackTrans() {
    int [] result = new int[30590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

    /**
     * 
     * @param packed 
     * @param offset 
     * @param result 
     * @return 
     */
  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\4\11\3\1\1\11\1\1\1\11\3\1"+
    "\1\11\36\1\3\11\6\1\1\0\1\1\1\0\12\1"+
    "\1\0\2\11\2\1\1\11\2\1\1\0\2\11\1\1"+
    "\1\11\1\1\1\0\6\11\27\1\1\0\7\1\1\11"+
    "\12\1\2\11\1\1\2\11\21\1\2\11\2\1\2\0"+
    "\3\1\1\0\24\1\1\0\1\11\5\1\2\11\1\0"+
    "\36\1\1\0\1\1\1\0\25\1\1\0\1\11\46\1"+
    "\1\0\4\1\1\11\56\1\1\11\2\1\1\0\27\1"+
    "\1\11\14\1\1\11\43\1\2\0\63\1\1\0\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            CLexer shredder = new CLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != CToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 133: break;
        case 83: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 134: break;
        case 45: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 135: break;
        case 48: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 136: break;
        case 10: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 137: break;
        case 105: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 138: break;
        case 117: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_MUTABLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 139: break;
        case 106: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 140: break;
        case 102: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_EXPLICIT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 141: break;
        case 42: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 142: break;
        case 50: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DECREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 143: break;
        case 31: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_COMMA;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 144: break;
        case 118: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_WCHAR_T;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 145: break;
        case 5: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 146: break;
        case 122: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNSIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 147: break;
        case 97: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 148: break;
        case 60: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_IF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 149: break;
        case 39: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 150: break;
        case 23: 
          { lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return (t);
          }
        case 151: break;
        case 43: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 152: break;
        case 49: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_ARROW;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 153: break;
        case 41: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 154: break;
        case 82: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOID;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 155: break;
        case 101: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_EXTERN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 156: break;
        case 40: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 157: break;
        case 26: 
          { /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 158: break;
        case 54: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 159: break;
        case 114: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VIRTUAL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 160: break;
        case 109: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INLINE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 161: break;
        case 19: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 162: break;
        case 27: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 163: break;
        case 116: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PRIVATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 164: break;
        case 70: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ASM;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 165: break;
        case 81: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BOOL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 166: break;
        case 22: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_DECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 167: break;
        case 91: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNION;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 168: break;
        case 125: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OVERLOAD;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 169: break;
        case 44: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 170: break;
        case 128: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PROTECTED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 171: break;
        case 67: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 172: break;
        case 29: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_PERIOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 173: break;
        case 96: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CLASS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 174: break;
        case 12: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 175: break;
        case 89: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_THROW;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 176: break;
        case 77: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ELSE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 177: break;
        case 112: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PUBLIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 178: break;
        case 4: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_QUESTION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 179: break;
        case 36: 
          { nextState = YYINITIAL;
    lastToken = CToken.COMMENT_END_OF_LINE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 180: break;
        case 92: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FLOAT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 181: break;
        case 62: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 182: break;
        case 126: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OPERATOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 183: break;
        case 87: 
          { lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 184: break;
        case 78: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ENUM;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 185: break;
        case 63: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 186: break;
        case 100: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_RETURN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 187: break;
        case 57: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 188: break;
        case 56: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 189: break;
        case 95: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CATCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 190: break;
        case 2: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 191: break;
        case 73: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 192: break;
        case 113: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPEDEF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 193: break;
        case 58: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 194: break;
        case 65: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 195: break;
        case 130: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 196: break;
        case 51: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_FLOAT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 197: break;
        case 33: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 198: break;
        case 14: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 199: break;
        case 80: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_LONG;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 200: break;
        case 93: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SHORT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 201: break;
        case 72: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NEW;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 202: break;
        case 79: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_AUTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 203: break;
        case 3: 
          { nextState = PREPROCESSOR;
	lastToken = CToken.ERROR_MALFORMED_PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 204: break;
        case 7: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 205: break;
        case 94: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BREAK;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 206: break;
        case 13: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 207: break;
        case 21: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 208: break;
        case 37: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 209: break;
        case 6: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 210: break;
        case 52: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_FLOATING_POINT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 211: break;
        case 1: 
          { lastToken = CToken.PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
          }
        case 212: break;
        case 20: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 213: break;
        case 76: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_THIS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 214: break;
        case 59: 
          { lastToken = CToken.OPERATOR_INCREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 215: break;
        case 88: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 216: break;
        case 9: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 217: break;
        case 64: 
          { nextState = PREPROCESSOR;
	lastToken = CToken.PREPROCESSOR_DIRECTIVE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
          }
        case 218: break;
        case 124: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONTINUE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 219: break;
        case 15: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 220: break;
        case 85: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CHAR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 221: break;
        case 34: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 222: break;
        case 74: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_DOCUMENTATION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 223: break;
        case 17: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 224: break;
        case 131: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DYNAMIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 225: break;
        case 30: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_SEMICOLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 226: break;
        case 115: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DEFAULT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 227: break;
        case 47: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 228: break;
        case 132: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REINTERPRET_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 229: break;
        case 108: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SWITCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 230: break;
        case 121: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REGISTER;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 231: break;
        case 16: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 232: break;
        case 8: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 233: break;
        case 71: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_HEXIDECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 234: break;
        case 66: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 235: break;
        case 55: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 236: break;
        case 104: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STRUCT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 237: break;
        case 127: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NAMESPACE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 238: break;
        case 119: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TEMPLATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 239: break;
        case 86: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_GOTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 240: break;
        case 61: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 241: break;
        case 90: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_USING;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 242: break;
        case 28: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 243: break;
        case 25: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 244: break;
        case 99: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPEID;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 245: break;
        case 98: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_WHILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 246: break;
        case 53: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_OCTAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 247: break;
        case 103: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FRIEND;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 248: break;
        case 46: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 249: break;
        case 129: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 250: break;
        case 11: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 251: break;
        case 24: 
          { nextState = YYINITIAL;
    lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return (t);
          }
        case 252: break;
        case 38: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 253: break;
        case 84: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CASE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 254: break;
        case 69: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 255: break;
        case 111: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DOUBLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 256: break;
        case 123: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOLATILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 257: break;
        case 110: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DELETE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 258: break;
        case 75: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_BOOLEAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 259: break;
        case 18: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 260: break;
        case 107: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIZEOF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 261: break;
        case 32: 
          { nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_COLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 262: break;
        case 120: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPENAME;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 263: break;
        case 68: 
          { nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TRY;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
