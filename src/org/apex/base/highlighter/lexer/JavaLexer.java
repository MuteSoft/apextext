/* The following code was generated by JFlex 1.4.1 on 5/28/07 7:12 PM */

/* JavaLexer.java is a generated file.  You probably want to
 * edit JavaLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JavaLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JavaLexer.lex</code><br>
 * You will then have a file called JavaLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package org.apex.base.highlighter.lexer;

import java.io.*;

/** 
 * JavaLexer is a java lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JavaLexer shredder = new JavaLexer(System.in);
 *  JavaToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the 
 * <A Href=http://java.sun.com/docs/books/jls/html/>Java 
 * Language Specification</A>.
 * @see JavaToken
 */ 


public class JavaLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  9,  0,  7,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 44, 18,  0,  6, 10, 48, 17, 33, 34, 20, 21, 40, 22, 32, 19, 
     4,  5,  5,  5,  3,  3,  3,  3,  2,  2, 47, 39, 43, 41, 42, 46, 
     0,  1,  1,  1, 31, 28, 29,  6,  6,  6,  6,  6, 24,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6, 26,  6,  6, 37,  8, 38, 50,  6, 
     0, 51, 14, 53, 30, 27, 15, 59, 57, 58,  6, 55, 23, 60, 13, 54, 
    61,  6, 12, 52, 16, 11, 62, 63, 25, 56, 64, 35, 49, 36, 45,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\5\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\3\2\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\10\2\1\37\1\40\1\41\1\37\2\42"+
    "\1\37\2\43\1\44\2\37\2\45\1\1\1\46\15\2"+
    "\1\47\1\0\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\4\2\1\63\1\42"+
    "\1\45\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\13\2\1\77\7\2\1\42"+
    "\1\0\1\100\1\101\1\45\1\0\1\1\2\2\1\102"+
    "\6\2\1\103\3\2\1\104\2\2\1\6\1\0\1\105"+
    "\2\47\1\6\2\51\1\7\2\54\5\2\1\40\1\0"+
    "\1\42\1\44\1\0\1\45\1\106\1\107\1\110\14\2"+
    "\1\111\12\2\1\42\1\112\1\45\1\1\1\2\1\113"+
    "\3\2\1\114\2\2\1\115\2\2\1\116\1\6\1\117"+
    "\1\51\1\0\2\54\1\120\1\121\1\122\3\2\1\123"+
    "\11\2\1\124\2\2\1\125\4\2\1\126\5\2\1\127"+
    "\1\2\1\1\2\2\1\130\1\2\1\131\1\132\1\2"+
    "\1\133\1\6\1\51\1\0\1\134\4\2\1\135\3\2"+
    "\1\136\1\2\1\137\1\140\1\2\1\141\11\2\1\142"+
    "\1\143\1\144\3\2\1\145\1\6\1\51\1\0\2\2"+
    "\1\146\2\2\1\147\1\2\1\150\4\2\1\151\1\152"+
    "\4\2\1\153\1\154\1\2\1\0\1\155\1\156\10\2"+
    "\1\157\1\160\2\2\1\0\1\161\1\162\1\2\1\163"+
    "\4\2\1\164\1\165\1\2\1\166\2\2\1\167\1\2"+
    "\1\170\1\171\1\2\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\u05d7\0\u05d7\0\u05d7\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u09e7\0\u09e7\0\u0a28\0\u09e7\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u09e7\0\u0b6d\0\u0bae\0\u09e7\0\u0bef\0\u0c30"+
    "\0\u05d7\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u05d7\0\u1040\0\u05d7\0\u1081\0\u10c2\0\u05d7\0\u05d7\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u05d7\0\u05d7\0\u12ca\0\u05d7\0\u130b\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6"+
    "\0\202\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u09e7\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\202\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\202\0\u1b6c\0\u1bad\0\u1bee\0\202\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u05d7\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u05d7"+
    "\0\u2080\0\u05d7\0\u05d7\0\u20c1\0\u05d7\0\u05d7\0\u2102\0\u05d7"+
    "\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512"+
    "\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\u09e7\0\u275b\0\u279c\0\u27dd\0\202\0\u281e\0\u285f\0\u28a0"+
    "\0\202\0\u28e1\0\u2922\0\202\0\u2963\0\u29a4\0\202\0\u29e5"+
    "\0\u05d7\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u05d7\0\202\0\202"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u05d7\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0"+
    "\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\202\0\u2e36\0\u2e77"+
    "\0\202\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\202\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\202\0\u3101\0\u3142\0\u3183\0\u31c4"+
    "\0\202\0\u3205\0\202\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u05d7\0\u33cc\0\u340d\0\u344e\0\u348f\0\202\0\u34d0"+
    "\0\u3511\0\u3552\0\202\0\u3593\0\202\0\202\0\u35d4\0\202"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\u381d\0\202\0\202\0\202\0\u385e\0\u389f\0\u38e0\0\202"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\202\0\u3a66\0\u3aa7"+
    "\0\202\0\u3ae8\0\202\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\202"+
    "\0\202\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\202\0\202\0\u3d31"+
    "\0\u3d72\0\202\0\202\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7"+
    "\0\u3ef8\0\u3f39\0\u3f7a\0\202\0\202\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\202\0\202\0\u407e\0\202\0\u40bf\0\u4100\0\u4141\0\u4182"+
    "\0\202\0\202\0\u41c3\0\202\0\u4204\0\u4245\0\202\0\u4286"+
    "\0\202\0\202\0\u42c7\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\3\1\6\1\7"+
    "\1\6\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\3\3"+
    "\1\25\2\3\1\26\1\3\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\4\3\1\55\1\56\1\3\1\57\1\60"+
    "\1\61\1\3\7\2\1\0\1\2\2\0\6\2\6\0"+
    "\11\2\23\0\17\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\16\3\2\62\4\4\1\62\1\0"+
    "\1\62\2\0\4\62\1\63\1\62\6\0\2\64\2\62"+
    "\2\65\1\63\2\66\1\67\22\0\20\62\1\70\1\71"+
    "\1\72\1\71\1\62\1\0\1\62\2\0\4\62\1\73"+
    "\1\62\6\0\2\64\2\74\2\75\1\73\2\76\1\77"+
    "\22\0\16\62\7\0\1\6\1\0\1\6\67\0\7\2"+
    "\1\0\1\2\2\0\1\100\5\2\6\0\11\2\23\0"+
    "\16\2\51\0\1\101\27\0\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\102\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\103\5\3\6\0"+
    "\4\3\1\104\4\3\23\0\1\105\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\106\4\3\6\0\11\3"+
    "\23\0\3\3\1\107\1\3\1\110\10\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\1\111\10\3\23\0"+
    "\1\112\2\3\1\113\3\3\1\114\6\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\115\4\3\6\0\11\3"+
    "\23\0\6\3\1\116\7\3\10\117\1\120\1\0\7\117"+
    "\1\121\57\117\10\17\1\122\1\0\10\17\1\123\56\17"+
    "\23\0\1\124\1\125\24\0\1\126\100\0\1\127\54\0"+
    "\1\130\23\0\1\131\55\0\1\132\22\0\1\133\27\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\3\3\1\134\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\1\135\1\3\1\136\6\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\4\3\1\137\4\3\23\0\3\3\1\140\12\3\2\0"+
    "\2\141\1\142\1\141\245\0\1\143\100\0\1\144\1\145"+
    "\77\0\1\146\1\0\1\147\76\0\1\150\100\0\1\151"+
    "\6\0\1\152\71\0\1\153\7\0\1\154\70\0\1\155"+
    "\27\0\1\2\6\3\1\0\1\7\2\0\3\3\1\156"+
    "\2\3\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\157\4\3\1\160\6\0\11\3\23\0"+
    "\5\3\1\161\1\162\5\3\1\163\1\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\1\164\10\3\23\0"+
    "\1\165\2\3\1\166\2\3\1\167\7\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\170\1\3\1\171\1\3"+
    "\6\0\11\3\23\0\11\3\1\172\4\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\3\3"+
    "\1\173\12\3\1\2\6\3\1\0\1\7\2\0\1\174"+
    "\1\175\4\3\6\0\11\3\23\0\1\176\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\3\3\1\177\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\6\3\1\200\7\3\7\62"+
    "\1\0\1\62\2\0\6\62\6\0\12\62\22\0\20\62"+
    "\4\201\1\62\1\0\1\62\2\0\6\62\4\0\2\202"+
    "\12\62\22\0\20\62\4\67\1\62\1\0\1\62\2\0"+
    "\4\62\1\63\1\62\6\0\4\62\2\65\1\63\2\66"+
    "\1\62\22\0\20\62\4\70\1\62\1\0\1\62\2\0"+
    "\4\62\1\63\1\62\6\0\4\62\2\65\1\63\2\66"+
    "\1\67\22\0\20\62\1\70\3\71\1\62\1\0\1\62"+
    "\2\0\4\62\1\63\1\62\6\0\2\203\2\62\2\65"+
    "\1\63\2\66\1\67\22\0\20\62\1\70\1\71\1\72"+
    "\1\71\1\62\1\0\1\62\2\0\4\62\1\73\1\62"+
    "\6\0\2\203\2\62\2\75\1\73\2\76\1\77\22\0"+
    "\17\62\5\204\1\62\1\0\1\62\2\0\3\62\2\204"+
    "\1\62\6\0\4\62\5\204\1\62\22\0\1\204\1\62"+
    "\1\204\15\62\4\205\1\62\1\0\1\62\2\0\6\62"+
    "\4\0\2\206\12\62\22\0\20\62\2\67\1\77\1\67"+
    "\1\62\1\0\1\62\2\0\4\62\1\73\1\62\6\0"+
    "\4\62\2\75\1\73\2\76\1\62\22\0\16\62\1\2"+
    "\5\207\1\2\1\0\1\2\2\0\3\2\2\207\1\2"+
    "\6\0\4\2\5\207\23\0\1\207\1\2\1\207\14\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\210\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\1\211\10\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\14\3\1\212"+
    "\1\3\1\2\6\3\1\0\1\7\2\0\5\3\1\213"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\214\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\3\3\1\215\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\216\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\3\3\1\217\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\1\220\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\221\4\3\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\222\3\3\6\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\223\5\3\6\0\11\3\23\0"+
    "\1\224\4\3\1\225\10\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\226\4\3\6\0\11\3\23\0\7\3"+
    "\1\227\6\3\10\230\1\231\1\0\7\230\1\232\62\230"+
    "\1\233\2\234\2\230\1\117\1\0\1\230\1\235\7\117"+
    "\56\230\3\236\3\17\2\236\1\17\1\0\1\236\1\237"+
    "\6\17\1\240\56\236\11\124\1\0\67\124\24\241\1\242"+
    "\54\241\1\2\6\3\1\0\1\7\2\0\2\3\1\243"+
    "\3\3\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\1\3\1\244"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\5\3\1\245"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\4\3\1\246\1\3\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\247\5\3\6\0"+
    "\11\3\23\0\16\3\2\0\4\141\11\0\1\250\13\0"+
    "\2\251\1\250\2\252\43\0\2\141\1\142\1\141\11\0"+
    "\1\253\13\0\2\254\1\253\2\255\112\0\1\256\1\257"+
    "\77\0\1\260\27\0\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\1\3\1\261\14\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\12\3\1\262\3\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\263\4\3\6\0\11\3\23\0\1\264\15\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\265\3\3"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\3\3\1\266\12\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\7\3\1\267\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\1\270\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\271\6\0\11\3"+
    "\23\0\1\3\1\272\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\273\3\3\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\274\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\275\6\0\11\3\23\0\1\3\1\276\14\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\12\3\1\277\3\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\300\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\3\3\1\301\2\3\6\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\3\3\1\302\3\3\1\303"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\2\3\1\304\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\1\305\10\3\23\0\7\3"+
    "\1\306\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\7\3\1\307\6\3\2\62\4\201"+
    "\1\62\1\0\1\62\2\0\4\62\1\63\1\62\6\0"+
    "\6\62\1\63\2\66\1\62\22\0\16\62\2\0\4\310"+
    "\73\0\1\62\5\204\1\62\1\0\1\62\2\0\3\62"+
    "\2\204\1\62\6\0\2\311\2\62\5\204\1\62\22\0"+
    "\1\204\1\62\1\204\15\62\4\205\1\62\1\0\1\62"+
    "\2\0\4\62\1\73\1\62\6\0\6\62\1\73\2\76"+
    "\1\62\22\0\16\62\2\0\4\312\73\0\1\2\5\313"+
    "\1\2\1\0\1\2\2\0\3\2\2\313\1\2\6\0"+
    "\4\2\5\313\23\0\1\313\1\2\1\313\14\2\6\3"+
    "\1\0\1\7\2\0\1\314\5\3\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\1\315\10\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\7\3\1\316\6\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\317\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\1\320\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\4\3\1\321\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\1\322\15\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\1\3\1\223"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\1\323\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\324\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\325\3\3"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\3\3\1\326\12\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\3\1\327\14\3\10\230\1\231\1\0\7\230"+
    "\1\121\70\230\1\0\72\230\3\117\2\230\1\231\1\0"+
    "\7\230\1\232\62\230\3\233\2\230\1\231\1\0\7\230"+
    "\1\232\60\230\5\330\2\230\1\231\1\0\4\230\2\330"+
    "\1\230\1\121\11\230\5\330\23\230\1\330\1\230\1\330"+
    "\13\230\11\236\1\0\10\236\1\331\57\236\5\332\3\236"+
    "\1\0\4\236\2\332\2\236\1\331\10\236\5\332\23\236"+
    "\1\332\1\236\1\332\13\236\10\240\1\333\1\0\10\240"+
    "\1\123\56\240\24\241\1\334\54\241\23\335\1\336\1\242"+
    "\54\335\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\10\3\1\337\5\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\4\3\1\340\4\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\4\3\1\341\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\1\342\15\3"+
    "\1\2\6\3\1\0\1\7\2\0\3\3\1\343\2\3"+
    "\6\0\11\3\23\0\16\3\2\0\4\310\17\0\2\202"+
    "\54\0\4\312\17\0\2\206\123\0\1\344\27\0\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\345\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\4\3\1\346\4\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\7\3"+
    "\1\347\6\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\350\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\2\3\1\351"+
    "\13\3\1\2\6\3\1\0\1\7\2\0\1\3\1\352"+
    "\4\3\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\353\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\3\1\354\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\2\3\1\355\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\4\3"+
    "\1\356\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\357\6\0\11\3\23\0\1\3\1\360"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\1\3\1\361"+
    "\4\3\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\4\3\1\362\4\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\5\3\1\363"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\1\364\10\3\23\0\3\3\1\365"+
    "\12\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\3\3\1\366\12\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\1\367\10\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\370\6\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\13\3\1\371\2\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\4\3\1\372\11\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\1\373\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\7\3\1\374\1\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\1\375\10\3\23\0\16\3\2\0\4\310\11\0"+
    "\1\250\15\0\1\250\2\252\43\0\4\312\11\0\1\253"+
    "\15\0\1\253\2\255\41\0\1\2\5\376\1\2\1\0"+
    "\1\2\2\0\3\2\2\376\1\2\6\0\4\2\5\376"+
    "\23\0\1\376\1\2\1\376\14\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\377\4\3\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\13\3\1\u0100\2\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\4\3\1\u0101\11\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\4\3"+
    "\1\u0102\4\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u0103\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\1\u0104\10\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\1\3\1\u0105\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\14\3"+
    "\1\u0106\1\3\1\230\5\u0107\2\230\1\231\1\0\4\230"+
    "\2\u0107\1\230\1\121\11\230\5\u0107\23\230\1\u0107\1\230"+
    "\1\u0107\13\230\1\236\5\u0108\3\236\1\0\4\236\2\u0108"+
    "\2\236\1\331\10\236\5\u0108\23\236\1\u0108\1\236\1\u0108"+
    "\13\236\3\0\3\240\2\0\1\240\2\0\1\u0109\7\240"+
    "\56\0\23\241\1\u010a\1\334\54\241\24\335\1\242\54\335"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\u010b\3\3"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\u010c\5\3\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\1\u010d\10\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\u010e\4\3\6\0\11\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\u010f\4\3\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\2\3\1\u0110\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\7\3"+
    "\1\u0111\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\6\3\1\u0112\7\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u0113\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\2\3\1\u0114\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\1\3\1\u0115"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\6\3\1\u0116\7\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\11\3\23\0\7\3\1\u0117"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0118"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\3\1\u0119\4\3\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\u011a\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\4\3\1\u011b\4\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\u011c\4\3\6\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\7\3\1\u011d\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\4\3\1\u011e"+
    "\4\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\1\u011f\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\1\u0120"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0121"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\u0122\4\3\23\0\16\3"+
    "\1\2\5\3\1\2\1\0\1\2\2\0\3\2\2\3"+
    "\1\2\6\0\4\2\5\3\23\0\1\3\1\2\1\3"+
    "\14\2\6\3\1\0\1\7\2\0\2\3\1\u0123\3\3"+
    "\6\0\11\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\u0124\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\1\u0125\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\1\u0126\10\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\7\3"+
    "\1\u0127\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\1\3\1\u0128\14\3\1\230\5\u0129"+
    "\2\230\1\231\1\0\4\230\2\u0129\1\230\1\121\11\230"+
    "\5\u0129\23\230\1\u0129\1\230\1\u0129\13\230\1\236\5\u012a"+
    "\3\236\1\0\4\236\2\u012a\2\236\1\331\10\236\5\u012a"+
    "\23\236\1\u012a\1\236\1\u012a\13\236\1\0\5\u012b\10\0"+
    "\2\u012b\13\0\5\u012b\23\0\1\u012b\1\0\1\u012b\13\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\7\3"+
    "\1\u012c\1\3\23\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\1\u012d\10\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\4\3\1\u012e"+
    "\4\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\1\u012f\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u0130\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\2\3\1\u0131\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\3\1\u0132\4\3\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\6\3\1\u0133\7\3\1\2\6\3\1\0"+
    "\1\7\2\0\2\3\1\u0134\3\3\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\4\3\1\u0135"+
    "\1\3\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\2\3\1\u0136\3\3\6\0\11\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\11\3\1\u0137\4\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u0138\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\2\3\1\u0139\13\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\11\3\23\0\2\3\1\u013a\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\u013b\6\0"+
    "\11\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\10\3\1\u013c\5\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\7\3\1\u013d\6\3\1\2\6\3\1\0\1\7\2\0"+
    "\2\3\1\u013e\3\3\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\5\3\1\u013f\10\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\4\3\1\u0140\4\3\23\0\16\3\1\230"+
    "\5\117\2\230\1\231\1\0\4\230\2\117\1\230\1\121"+
    "\11\230\5\117\23\230\1\117\1\230\1\117\13\230\1\236"+
    "\5\17\3\236\1\0\4\236\2\17\2\236\1\331\10\236"+
    "\5\17\23\236\1\17\1\236\1\17\13\236\1\0\5\u0141"+
    "\10\0\2\u0141\13\0\5\u0141\23\0\1\u0141\1\0\1\u0141"+
    "\13\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\11\3\23\0\1\3\1\u0142\14\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u0143\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\2\3\1\u0144\13\3\1\2\6\3\1\0\1\7"+
    "\2\0\4\3\1\u0145\1\3\6\0\11\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\3\3\1\u0146\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\u0147\5\3\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\11\3\23\0"+
    "\1\u0148\15\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\2\3\1\u0149\13\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\4\3\1\u014a\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u014b\6\0\11\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\4\3\1\u014c\4\3\23\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\6\0"+
    "\4\3\1\u014d\4\3\23\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\6\0\1\u014e\10\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\u014f\3\3"+
    "\6\0\11\3\23\0\16\3\1\0\5\u0150\10\0\2\u0150"+
    "\13\0\5\u0150\23\0\1\u0150\1\0\1\u0150\13\0\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0151\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\12\3\1\u0152\3\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\u0153\3\3\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\4\3\1\u0154\4\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\11\3\23\0\2\3"+
    "\1\u0155\13\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\4\3\1\u0156\4\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\u0157\3\3\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\4\3\1\u0158\4\3\23\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\4\3\1\u0159\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u015a\6\0\11\3\23\0\16\3\1\0\5\240\10\0"+
    "\2\240\13\0\5\240\23\0\1\240\1\0\1\240\13\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\7\3\1\u015b\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\6\0\4\3\1\u015c\4\3\23\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\11\3"+
    "\23\0\3\3\1\u015d\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u015e\6\0\11\3\23\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\6\0\7\3\1\u015f"+
    "\1\3\23\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\6\0\11\3\23\0\15\3\1\u0160\1\2\6\3"+
    "\1\0\1\7\2\0\4\3\1\u0161\1\3\6\0\11\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\11\3\23\0\1\3\1\u0162\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\6\0\4\3\1\u0163\4\3"+
    "\23\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\6\0\7\3\1\u0164\1\3\23\0\16\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\26\1\10\11\4\1\3\11\32\1\1\11\16\1"+
    "\1\0\1\11\1\1\1\11\2\1\6\11\7\1\2\11"+
    "\1\1\1\11\1\1\6\11\24\1\1\0\3\1\1\0"+
    "\22\1\1\0\1\11\15\1\1\11\1\0\2\11\1\0"+
    "\2\11\1\1\1\11\50\1\1\11\1\1\1\0\2\1"+
    "\1\11\5\1\1\11\44\1\1\0\1\11\40\1\1\0"+
    "\25\1\1\0\16\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            JavaLexer shredder = new JavaLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JavaToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { lastToken = JavaToken.OPERATOR_LESS_THAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 123: break;
        case 14: 
          { lastToken = JavaToken.SEPARATOR_RPAREN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 124: break;
        case 15: 
          { lastToken = JavaToken.SEPARATOR_LBRACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 125: break;
        case 52: 
          { lastToken = JavaToken.OPERATOR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 126: break;
        case 62: 
          { lastToken = JavaToken.OPERATOR_BITWISE_XOR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 127: break;
        case 5: 
          { lastToken = JavaToken.OPERATOR_MOD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 128: break;
        case 61: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 129: break;
        case 48: 
          { lastToken = JavaToken.OPERATOR_ADD_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 130: break;
        case 93: 
          { lastToken = JavaToken.RESERVED_WORD_SUPER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 131: break;
        case 83: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_UNSIGNED_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 132: break;
        case 55: 
          { lastToken = JavaToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 133: break;
        case 100: 
          { lastToken = JavaToken.RESERVED_WORD_NATIVE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 134: break;
        case 39: 
          { lastToken = JavaToken.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 135: break;
        case 89: 
          { lastToken = JavaToken.RESERVED_WORD_FLOAT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 136: break;
        case 75: 
          { lastToken = JavaToken.LITERAL_NULL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 137: break;
        case 118: 
          { lastToken = JavaToken.RESERVED_WORD_INTERFACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 138: break;
        case 38: 
          { lastToken = JavaToken.OPERATOR_MOD_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 139: break;
        case 34: 
          { Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            lastToken = JavaToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = JavaToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_DOUBLE_SIZE;
    } 
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 140: break;
        case 44: 
          { lastToken = JavaToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 141: break;
        case 54: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 142: break;
        case 96: 
          { lastToken = JavaToken.RESERVED_WORD_CATCH;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 143: break;
        case 107: 
          { lastToken = JavaToken.RESERVED_WORD_BOOLEAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 144: break;
        case 86: 
          { lastToken = JavaToken.RESERVED_WORD_GOTO;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 145: break;
        case 59: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_AND;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 146: break;
        case 60: 
          { lastToken = JavaToken.OPERATOR_BITWISE_OR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 147: break;
        case 69: 
          { lastToken = JavaToken.LITERAL_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 148: break;
        case 27: 
          { lastToken = JavaToken.OPERATOR_COLON;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 149: break;
        case 117: 
          { lastToken = JavaToken.RESERVED_WORD_TRANSIENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 150: break;
        case 10: 
          { lastToken = JavaToken.OPERATOR_ADD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 151: break;
        case 110: 
          { lastToken = JavaToken.RESERVED_WORD_DEFAULT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 152: break;
        case 58: 
          { lastToken = JavaToken.OPERATOR_BITWISE_AND_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 153: break;
        case 121: 
          { lastToken = JavaToken.RESERVED_WORD_IMPLEMENTS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 154: break;
        case 81: 
          { lastToken = JavaToken.RESERVED_WORD_LONG;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 155: break;
        case 84: 
          { lastToken = JavaToken.RESERVED_WORD_CASE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 156: break;
        case 49: 
          { lastToken = JavaToken.OPERATOR_DECREMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 157: break;
        case 40: 
          { lastToken = JavaToken.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 158: break;
        case 120: 
          { lastToken = JavaToken.RESERVED_WORD_INSTANCEOF;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 159: break;
        case 53: 
          { lastToken = JavaToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 160: break;
        case 7: 
          { /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    lastToken = JavaToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 161: break;
        case 77: 
          { lastToken = JavaToken.LITERAL_BOOLEAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 162: break;
        case 18: 
          { lastToken = JavaToken.SEPARATOR_RBRACKET;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 163: break;
        case 66: 
          { lastToken = JavaToken.RESERVED_WORD_NEW;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 164: break;
        case 102: 
          { lastToken = JavaToken.RESERVED_WORD_DOUBLE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 165: break;
        case 78: 
          { lastToken = JavaToken.RESERVED_WORD_THIS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 166: break;
        case 30: 
          { lastToken = JavaToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 167: break;
        case 31: 
          { lastToken = JavaToken.ERROR_FLOAT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 168: break;
        case 37: 
          { lastToken = JavaToken.LITERAL_DOUBLE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 169: break;
        case 8: 
          { lastToken = JavaToken.OPERATOR_DIVIDE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 170: break;
        case 29: 
          { lastToken = JavaToken.OPERATOR_BITWISE_OR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 171: break;
        case 19: 
          { lastToken = JavaToken.SEPARATOR_SEMICOLON;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 172: break;
        case 63: 
          { lastToken = JavaToken.RESERVED_WORD_IF;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 173: break;
        case 97: 
          { lastToken = JavaToken.RESERVED_WORD_CONST;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 174: break;
        case 88: 
          { lastToken = JavaToken.RESERVED_WORD_BREAK;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 175: break;
        case 17: 
          { lastToken = JavaToken.SEPARATOR_LBRACKET;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 176: break;
        case 20: 
          { lastToken = JavaToken.SEPARATOR_COMMA;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 177: break;
        case 36: 
          { /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    lastToken = JavaToken.LITERAL_FLOATING_POINT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 178: break;
        case 35: 
          { /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 11 digits, the first
     * of which must be 3 or less.
     */
    lastToken = JavaToken.LITERAL_INTEGER_OCTAL;
    int i;     
    String text = yytext();
    int length = text.length();
    for (i=1 ; i<length-11; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    if (length - i > 11){
        lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
    } else if (length - i == 11){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (text.charAt(i) != '0' && text.charAt(i) != '1' && 
        text.charAt(i) != '2' && text.charAt(i) != '3'){
            lastToken = JavaToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK  
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 179: break;
        case 101: 
          { lastToken = JavaToken.RESERVED_WORD_THROWS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 180: break;
        case 16: 
          { lastToken = JavaToken.SEPARATOR_RBRACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 181: break;
        case 111: 
          { lastToken = JavaToken.RESERVED_WORD_PRIVATE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 182: break;
        case 104: 
          { lastToken = JavaToken.RESERVED_WORD_SWITCH;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 183: break;
        case 67: 
          { lastToken = JavaToken.RESERVED_WORD_FOR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 184: break;
        case 68: 
          { lastToken = JavaToken.RESERVED_WORD_TRY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 185: break;
        case 22: 
          { lastToken = JavaToken.OPERATOR_GREATER_THAN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 186: break;
        case 47: 
          { lastToken = JavaToken.OPERATOR_INCREMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 187: break;
        case 3: 
          { /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */     
    String text = yytext();
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == JavaToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + text);
        } else {
            Integer.decode(text);
        }
        lastToken = JavaToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 188: break;
        case 42: 
          { lastToken = JavaToken.LITERAL_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 189: break;
        case 108: 
          { lastToken = JavaToken.RESERVED_WORD_FINALLY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 190: break;
        case 43: 
          { lastToken = JavaToken.COMMENT_END_OF_LINE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 191: break;
        case 90: 
          { lastToken = JavaToken.RESERVED_WORD_FINAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 192: break;
        case 13: 
          { lastToken = JavaToken.SEPARATOR_LPAREN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 193: break;
        case 74: 
          { /* A Hex long cannot be too big.  After removing 
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    lastToken = JavaToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        lastToken = JavaToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 194: break;
        case 73: 
          { lastToken = JavaToken.RESERVED_WORD_INT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 195: break;
        case 92: 
          { lastToken = JavaToken.COMMENT_TRADITIONAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 196: break;
        case 85: 
          { lastToken = JavaToken.RESERVED_WORD_CHAR;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 197: break;
        case 4: 
          { lastToken = JavaToken.WHITE_SPACE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 198: break;
        case 116: 
          { lastToken = JavaToken.RESERVED_WORD_VOLATILE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 199: break;
        case 113: 
          { lastToken = JavaToken.RESERVED_WORD_ABSTRACT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 200: break;
        case 9: 
          { lastToken = JavaToken.OPERATOR_MULTIPLY;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 201: break;
        case 45: 
          { lastToken = JavaToken.OPERATOR_DIVIDE_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 202: break;
        case 106: 
          { lastToken = JavaToken.RESERVED_WORD_PUBLIC;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 203: break;
        case 95: 
          { lastToken = JavaToken.RESERVED_WORD_CLASS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 204: break;
        case 79: 
          { lastToken = JavaToken.ERROR_MALFORMED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 205: break;
        case 25: 
          { lastToken = JavaToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 206: break;
        case 64: 
          { /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 23 digits, the first
     * of which must be 1 or less.  The last will be the L or l
     * at the end.
     */
    lastToken = JavaToken.LITERAL_LONG_OCTAL;
    int i; 
    String text = yytext();
    int length = text.length();
    for (i=1 ; i<length-23; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    if (length - i > 23){
        lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
    } else if (length - i == 23){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (text.charAt(i) != '0' && text.charAt(i) != '1'){
            lastToken = JavaToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK  
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 207: break;
        case 99: 
          { lastToken = JavaToken.RESERVED_WORD_RETURN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 208: break;
        case 1: 
          { lastToken = JavaToken.ERROR_IDENTIFIER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 209: break;
        case 65: 
          { /* A Hex number cannot be too big.  After removing 
     * initial zeros, It can have 8 digits
     */
    lastToken = JavaToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;    
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = JavaToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        lastToken = JavaToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 210: break;
        case 46: 
          { lastToken = JavaToken.OPERATOR_MULTIPLY_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 211: break;
        case 28: 
          { lastToken = JavaToken.OPERATOR_BITWISE_AND;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 212: break;
        case 109: 
          { lastToken = JavaToken.RESERVED_WORD_EXTENDS;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 213: break;
        case 32: 
          { /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */ 
    Float f;
    try {
        f = Float.valueOf(yytext());
        if (f.isInfinite() || f.compareTo(new Float(0f)) == 0){
            lastToken = JavaToken.ERROR_FLOAT_SIZE;
        } else {
            lastToken = JavaToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        lastToken = JavaToken.ERROR_FLOAT_SIZE;
    }
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 214: break;
        case 6: 
          { lastToken = JavaToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 215: break;
        case 24: 
          { lastToken = JavaToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 216: break;
        case 119: 
          { lastToken = JavaToken.RESERVED_WORD_PROTECTED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 217: break;
        case 11: 
          { lastToken = JavaToken.OPERATOR_SUBTRACT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 218: break;
        case 71: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_UNSIGNED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 219: break;
        case 12: 
          { lastToken = JavaToken.SEPARATOR_PERIOD;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 220: break;
        case 33: 
          { String text = yytext();
    try {
        if (lastToken == JavaToken.OPERATOR_SUBTRACT){
            Long.decode('-' + text.substring(0,text.length()-1));
        } else {
            Long.decode(text.substring(0,text.length()-1));
        }
        lastToken = JavaToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){  
        lastToken = JavaToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 221: break;
        case 103: 
          { lastToken = JavaToken.RESERVED_WORD_STATIC;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 222: break;
        case 57: 
          { lastToken = JavaToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 223: break;
        case 82: 
          { lastToken = JavaToken.RESERVED_WORD_ELSE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 224: break;
        case 70: 
          { lastToken = JavaToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 225: break;
        case 51: 
          { lastToken = JavaToken.RESERVED_WORD_DO;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 226: break;
        case 122: 
          { lastToken = JavaToken.RESERVED_WORD_SYNCHRONIZED;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 227: break;
        case 105: 
          { lastToken = JavaToken.RESERVED_WORD_IMPORT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 228: break;
        case 98: 
          { lastToken = JavaToken.RESERVED_WORD_WHILE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 229: break;
        case 21: 
          { lastToken = JavaToken.OPERATOR_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 230: break;
        case 91: 
          { lastToken = JavaToken.RESERVED_WORD_THROW;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 231: break;
        case 80: 
          { lastToken = JavaToken.COMMENT_DOCUMENTATION;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 232: break;
        case 56: 
          { lastToken = JavaToken.OPERATOR_SHIFT_LEFT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 233: break;
        case 112: 
          { lastToken = JavaToken.RESERVED_WORD_PACKAGE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 234: break;
        case 87: 
          { lastToken = JavaToken.RESERVED_WORD_VOID;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 235: break;
        case 76: 
          { lastToken = JavaToken.RESERVED_WORD_BYTE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 236: break;
        case 41: 
          { lastToken = JavaToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 237: break;
        case 50: 
          { lastToken = JavaToken.OPERATOR_SUBTRACT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 238: break;
        case 115: 
          { lastToken = JavaToken.RESERVED_WORD_CONTINUE;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 239: break;
        case 26: 
          { lastToken = JavaToken.OPERATOR_QUESTION;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 240: break;
        case 94: 
          { lastToken = JavaToken.RESERVED_WORD_SHORT;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 241: break;
        case 114: 
          { lastToken = JavaToken.RESERVED_WORD_STRICTFP;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 242: break;
        case 72: 
          { lastToken = JavaToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 243: break;
        case 2: 
          { lastToken = JavaToken.IDENTIFIER;
    String text = yytext();
    JavaToken t = (new JavaToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 244: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
