/*
 * RenameDocumentView.java
 * Created on 14 April, 2008, 10:29 PM
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.ui;

import org.apex.base.common.CommonMessageManager;
import org.apex.base.common.FlowStopException;
import org.apex.base.core.EditorBase;
import org.apex.base.data.EditorContext;
import org.apex.base.data.LengthFilter;
import org.apex.base.event.RenameDocumentEventHandler;
import org.apex.base.ui.text.RenameDocumentModel;
import org.apex.base.ui.text.UIDialogModel;
import org.apex.base.util.StringUtil;
import java.awt.event.KeyEvent;
import javax.swing.JDialog;
import javax.swing.text.AbstractDocument;

/**
 * A rename document form where user can specify target document name.
 * @author Mrityunjoy Saha
 * @version 1.1
 * @since Apex 1.0
 */
public class RenameDocumentView extends javax.swing.JPanel implements
        UIDialogModel {

    /**
     * A rename document event handler.
     */
    private RenameDocumentEventHandler renameDocEvt;
    /**
     * The data model for rename document.
     */
    private RenameDocumentModel renameDocModel;

    /** 
     * Creates new form {@code RenameDocumentView} using given rename document
     * data model.
     * @param renameDocModel Rename document data model.
     */
    public RenameDocumentView(RenameDocumentModel renameDocModel) {
        this.renameDocModel = renameDocModel;
        this.renameDocEvt = new RenameDocumentEventHandler();
        initComponents();
    }

    /**
     * Initializes the form with data retrieved from specified document.
     * @param file A document.
     */
    public void initialize(org.apex.base.data.AbstractDocument file) {
        this.renameDocModel.setDocumentName(file.getName());
        this.renameTo.setText(file.getName());
    }

    /**
     * Returns the document name.
     * @return The current document name.
     */
    private String getDocumentName() {
        return StringUtil.isNullOrEmpty(this.renameDocModel.getDocumentName())
                ? ""
                : this.renameDocModel.getDocumentName();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        renameTo = new javax.swing.JTextField();
        ((AbstractDocument)this.renameTo.getDocument()).setDocumentFilter(new LengthFilter(60));
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        jLabel1.setText("Rename To:");

        renameTo.setText(getDocumentName());
        renameTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                renameToKeyPressed(evt);
            }
        });

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameTo, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancel, ok});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(renameTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(ok))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        getContainerWindow().setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        performRename();
    }//GEN-LAST:event_okActionPerformed

    /**
     * It renames the current document. The target name is entered by user.
     */
    private void performRename() {
        try {
            if (StringUtil.isNullOrEmpty(this.renameTo.getText())) {
                throw new FlowStopException("Invalid document name.", 1000);
            }
            this.renameDocModel.setDocumentName(this.renameTo.getText().trim());
            this.getContainerWindow().setVisible(false);
            this.renameDocEvt.execute(this.renameDocModel);
        } catch (FlowStopException jfe) {
            CommonMessageManager.showErrorMessage(this, jfe.getErrorCode(), jfe.getPlaceHolders());
        }
    }

    private void renameToKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_renameToKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            performRename();
        }
    }//GEN-LAST:event_renameToKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton ok;
    private javax.swing.JTextField renameTo;
    // End of variables declaration//GEN-END:variables
    /**
     * The container dialog window.
     */
    private JDialog containerWindow;

    public void setContainerWindow(JDialog window) {
        this.containerWindow = window;
    }

    public JDialog getContainerWindow() {
        return this.containerWindow;
    }

    public EditorContext getContext() {
        return EditorBase.getContext();
    }
}
