/*
 * ColorChooser.java
 * Created on December 20, 2007, 3:31 PM
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.ui;

import org.apex.base.core.EditorBase;
import org.apex.base.data.EditorContext;
import org.apex.base.ui.text.UIDialogModel;
import java.awt.Color;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;

/**
 * A color picker. It provides a button at the bottom to confirm
 * the color selection and another button to cancel color selection.
 * This page can be used whenever color selection by user is required. 
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class ColorChooser extends javax.swing.JPanel implements UIDialogModel {

    /**
     * Creates new form {@code ColorChooser}.
     * Also it initializes the panel.
     */
    public ColorChooser() {
        init();
    }

    /**
     * Initializes the color picker.
     */
    private void init() {
        initComponents();
        this.jColorChooser1.setColor(Color.WHITE);
    }

    /**
     * Returns the editor context.
     * @return The editor context.
     */
    public EditorContext getContext() {
        return EditorBase.getContext();
    }

    /**
     * Sets the container dialog window.
     * @param window The container dialog window.
     * @see #getContainerWindow()
     */
    public void setContainerWindow(JDialog window) {
        this.containerWindow = window;
    }

    /**
     * Returns the container dialog window.
     * @return The container dialog window.
     * @see #setContainerWindow(javax.swing.JDialog)
     */
    public JDialog getContainerWindow() {
        return this.containerWindow;
    }

    /**
     * Returns the selected color.
     * @return Selected color.
     */
    public Color getSelectedColor() {
        return this.selectedColor;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jSeparator1 = new javax.swing.JSeparator();
        cancel = new javax.swing.JButton();
        ok = new javax.swing.JButton();

        jColorChooser1.setFocusable(false);
        jColorChooser1.setRequestFocusEnabled(false);
        jColorChooser1.setVerifyInputWhenFocusTarget(false);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelHandler(evt);
            }
        });

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okHandler(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ok))
                    .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancel, ok});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel)
                    .addComponent(ok))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void cancelHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelHandler
        getContainerWindow().setVisible(false);
    }//GEN-LAST:event_cancelHandler

    private void okHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okHandler
        this.selectedColor = jColorChooser1.getColor();
        if (this.targetLabel != null) {
            String colorString = this.selectedColor.toString();
            this.targetLabel.setText(colorString.substring(colorString.indexOf(
                    "[")));
        }
        if (this.targetBox != null) {
            this.targetBox.setBackground(this.selectedColor);
        }
        getContainerWindow().setVisible(false);
    }//GEN-LAST:event_okHandler

    /**
     * Sets target label where selected color text
     * is displayed.
     * @param targetLabel The target color label.
     */
    public void setTargetLabel(JLabel targetLabel) {
        this.targetLabel = targetLabel;
    }

    /**
     * Sets target box where selected color
     * is shown.
     * @param targetBox The target color box.
     */
    public void setTargetBox(JComponent targetBox) {
        this.targetBox = targetBox;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton ok;
    // End of variables declaration//GEN-END:variables
    /**
     * The container dialog window.
     */
    private JDialog containerWindow;
    /**
     * Holds the selector color.
     */
    private Color selectedColor;
    /**
     * Holds a reference of target label where selected
     * color text is displayed.
     */
    private JLabel targetLabel;
    /**
     * Holds a reference of target box where selected color
     * is shown.
     */
    private JComponent targetBox;
}
