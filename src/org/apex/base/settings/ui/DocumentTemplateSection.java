/*
 * DocumentTemplateSection.java
 * Created on 19 November, 2007, 11:30 PM 
 *
 * Copyright (C) 2008 Mrityunjoy Saha
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.apex.base.settings.ui;

import org.apex.base.logging.Logger;
import org.apex.base.settings.DocumentTemplateConfiguration;
import org.apex.base.settings.ui.text.UIConfigurationDataModel;
import org.apex.base.settings.ui.text.UIConfigurationUtility;
import javax.swing.ComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import org.apex.base.core.EditorBase;
import org.apex.base.data.IDocumentType;

/**
 * A form to add or edit document templates. On this page, for a selected document type
 * user can add/edit document template.
 * @author Mrityunjoy Saha
 * @version 1.0
 * @since Apex 1.0
 */
public class DocumentTemplateSection extends javax.swing.JPanel implements
        UIConfigurationDataModel {

    /**
     * Document template configuration.
     */
    private DocumentTemplateConfiguration docTemplateConfig;

    /** 
     * Creates new form {@code DocumentTemplateSection} using specified document
     * template configuration.
     * @param docTemplateConfig Document template configuration.
     */
    public DocumentTemplateSection(
            DocumentTemplateConfiguration docTemplateConfig) {
        this.docTemplateConfig = docTemplateConfig;
        initComponents();
        applyConfiguration();
        this.setPreferredSize(ConfigurationPage.DEFAULT_SIZE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        documentType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        template = new org.apex.base.component.ApexTextPane();

        jLabel1.setText("Document Type:");

        documentType.setModel(getDocumentTypeModel());
        documentType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                documentTypeItemStateChanged(evt);
            }
        });

        jLabel2.setText("Template:");

        jScrollPane1.setViewportView(template);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(documentType, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(documentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void documentTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_documentTypeItemStateChanged
        doTaskWhenDocTypeSelected();
}//GEN-LAST:event_documentTypeItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox documentType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane template;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the data model for document types dropdown.
     * @return The data model for document types dropdown.
     */
    private ComboBoxModel getDocumentTypeModel() {
        return UIConfigurationUtility.getComboModel(EditorBase.getContext().getEditorProperties().
                getDocumentTypeBase().
                getDocumentTypes());
    }

    /**
     * It displays the template in an editor for selected document type.
     */
    private void doTaskWhenDocTypeSelected() {
        IDocumentType selectedDocType = getSelectedDocumentType();
        try {
            //this.template.getDocument().remove(0, this.template.getDocument().getLength());                    
            String selectedTemplate = this.docTemplateConfig.getDocTemplates().
                    get(selectedDocType);
            if (selectedTemplate == null) {
                selectedTemplate = "";
            }
            ((DefaultStyledDocument) this.template.getDocument()).replace(0, this.template.
                    getDocument().
                    getLength(), selectedTemplate, null);
            this.template.requestFocus();
        } catch (BadLocationException ex) {
            Logger.logWarning(
                    "Failed to render template for document type: " +
                    selectedDocType, ex);
        }
    }

    /**
     * Returns the selected document type.
     * @return The selected document type.
     */
    private IDocumentType getSelectedDocumentType() {
        return (IDocumentType) this.documentType.getSelectedItem();
    }

    public void applyConfiguration() {
        final DefaultStyledDocument defaultDocument =
                new DefaultStyledDocument();
        this.template.setDocument(defaultDocument);

        //((ApexTextPane) this.template).setTabSize(4);
        defaultDocument.addDocumentListener(new DocumentListener() {

            public void changedUpdate(DocumentEvent e) {
                updateTemplateInConfig();
            }

            public void insertUpdate(DocumentEvent e) {
                updateTemplateInConfig();
            }

            public void removeUpdate(DocumentEvent e) {
                updateTemplateInConfig();
            }

            private void updateTemplateInConfig() {
                try {
                    docTemplateConfig.getDocTemplates().
                            put(getSelectedDocumentType(),
                            defaultDocument.getText(0, template.getDocument().
                            getLength()));
                } catch (BadLocationException ex) {
                    Logger.logWarning(
                            "Failed to update code template in configuration object for document type: " +
                            getSelectedDocumentType(),
                            ex);
                }
            }
        });

        doTaskWhenDocTypeSelected();
    }
}
